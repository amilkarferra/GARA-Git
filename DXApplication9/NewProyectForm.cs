using System;
using System.Collections.Generic;
using System.Data.Linq;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Windows.Forms;
using DevExpress.Data.PLinq;
using DevExpress.Utils;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraGrid.Views.Grid.ViewInfo;
using DevExpress.XtraSpellChecker;
using DevExpress.XtraSplashScreen;
using DXApplication9.Properties;
using DXApplication9.ReportesSistema;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid;

namespace DXApplication9
{

    public partial class NewProyectForm : XtraForm
    {
        private NegocioDataContext AGlobalDataContext ;
        private Enumerados.TipoProyecto ATipoProyecto;
        public Proyectos GlobalProyecto;
        private bool ACambiosPendientes;
        private int AAjustandoPorCientoArtista;
        private int AAjustandoPorCientoAgencia;
        private int AAjustandoTotalEmpresa;
        private int AAjustandoTotalArtista;
        private readonly ConfiguracionGeneral AConfiguracion;
        public bool Insertando;
        private bool ACambiosRealizados;
        private class SmallTipoTramite
        {
            public int Valor { get; set; }
            public string Descripcion { get; set; }
        }

        private Guid GetProyectoId()
        {
            try
            {
                return GlobalProyecto.ProyectoID;
            }
            catch (Exception)
            {

                return new Guid();
            }
        }

        /// <summary>
        /// Este constructor se usa para crear el proyecto desde la ventana de la lista de los artistas
        /// </summary> <param name="aTipoProyecto"></param>
        /// <param name="anAgrupacionId"></param>
        /// <param name="anArtistaList"></param>
        //public NewProyectForm(Enumerados.TipoProyecto aTipoProyecto, int anAgrupacionId , List<Artista> anArtistaList = null)
        //{

        //    InitializeComponent();
        //    ConformaControlesEnumerados();
        //    _Configuracion = _GlobalDataContext.ConfiguracionGeneral.FirstOrDefault();

        //    //en caso de que me venga con una agrupacionId y no tenga artistas lleno el IntegrantesListbox con todos los integrantes del grupo
        //    //si vienen los dos vacios no lleno nada
        //    //si viene con una lista de Integrantes ya, pues solo lleno el integrantesListbox con esos que me vienen por parametro
        //    if (anArtistaList != null)
        //        IntegrantesLista.AddRange(
        //            anArtistaList.Where(c => c.AgrupacionId == anAgrupacionId).Select(c => new ParticipantesDeProyectos
        //            {
        //                Nombre = c.Nombre,
        //                CarnetIdentidad = c.CarnetIdentidad,
        //                NombreAgrupacion = c.Agrupacion.Nombre,
        //                Ocupacion = c.Desempenno,
        //                PrimerApellido = c.PrimerApellido,
        //                SegundoApellido = c.SegundoApellido,
        //                TipoParticipante = Enumerados.TipoParticipante.Integrante.ToString(),
        //                TipoTramiteMigratorio = aTipoProyecto == Enumerados.TipoProyecto.TramiteMigratorio ? Enumerados.TipoProyectoMigratorio.ConfeccionDePasaporteOrdinario.ToString() : null,
        //                Organismo = _GlobalDataContext.ConfiguracionGeneral.FirstOrDefault().Agencia
        //            }));

        //    else if (anAgrupacionId != null)
        //    {
        //        IntegrantesLista.AddRange(anArtistaList.Where(c => c.AgrupacionId == anAgrupacionId).Select(c => new ParticipantesDeProyectos
        //        {
        //            Nombre = c.Nombre,
        //            CarnetIdentidad = c.CarnetIdentidad,
        //            NombreAgrupacion = c.Agrupacion.Nombre,
        //            Ocupacion = c.Desempenno,
        //            PrimerApellido = c.PrimerApellido,
        //            SegundoApellido = c.SegundoApellido,
        //            TipoParticipante = Enumerados.TipoParticipante.Integrante.ToString(),
        //            TipoTramiteMigratorio = aTipoProyecto == Enumerados.TipoProyecto.TramiteMigratorio ? Enumerados.TipoProyectoMigratorio.ConfeccionDePasaporteOrdinario.ToString() : null,
        //            Organismo = _GlobalDataContext.ConfiguracionGeneral.FirstOrDefault().Agencia

        //        }).ToList());
        //    }
        //    //Integrantes_checkedListBox.ValueMember = "ArtistaID";
        //    //Integrantes_checkedListBox.DisplayMember = "Nombre";

        //    // This line of code is generated by Data Source Configuration Wizard
        //    EmpresarioIdLookUpEdit.Properties.DataSource = _GlobalDataContext.Empresarios;
        //    // This line of code is generated by Data Source Configuration Wizard
        //    //  imagenesTableAdapter1.Fill(artistasDataSet1.Imagenes);
        //    Invitados_GridControlInitData();
        //    // This line of code is generated by Data Source Configuration Wizard
        //    if (!string.IsNullOrEmpty(proyectoIDToolStripTextBox.Text))
        //    {
        //        bindingSource1.DataSource =
        //            _GlobalDataContext.CartasDeInvitacion.Where(
        //                c => c.ProyectoId == Convert.ToInt32(proyectoIDToolStripTextBox.Text))
        //                .Select(a => a.Imagenes);

        //        // This line of code is generated by Data Source Configuration Wizard
        //        bindingSource2.DataSource = _GlobalDataContext.ParticipantesDeProyectos.Where(
        //            c => c.ProyectoId == Convert.ToInt32(proyectoIDToolStripTextBox.Text));
        //    }
        //    TipoProyectoLookupEdit.EditValue = aTipoProyecto.ToString();
        //    // This line of code is generated by Data Source Configuration Wizard
        //    // This line of code is generated by Data Source Configuration Wizard
        //    bindingSource4.DataSource = _GlobalDataContext.Presentacion;
        //    // This line of code is generated by Data Source Configuration Wizard
        //    bindingSource5.DataSource = _GlobalDataContext.Imagenes;
        //    // This line of code is generated by Data Source Configuration Wizard
        //    bindingSource6.DataSource = new DXApplication9.NegocioDataContext().ParticipantesDeProyectos;
        //}

        /// <summary>
        /// este consctructor para abrir el formulario de un proyecto completamente vacío
        /// </summary>
        public NewProyectForm()
        {
            try
            {
                SplashScreenManager.ShowForm(MdiParent, typeof(WaitForm1), true, true);
            }
            catch (Exception)
            {

                SplashScreenManager.CloseForm();
                SplashScreenManager.ShowForm(MdiParent, typeof(WaitForm1), true, true);

            }
            InitializeComponent();
            AGlobalDataContext = new NegocioDataContext();
            PopulaControles();
            FechaConfeccionDateEdit.EditValue = DateTime.Today;
            Insertando = true;
            //  Integrantes_GridControlInitData();
            // Invitados_GridControlInitData();
            // This line of code is generated by Data Source Configuration Wizard
            //Presentacion_GridInitData();
            AConfiguracion = DynamicQueryable.FirstOrDefault(AGlobalDataContext.ConfiguracionGeneral);
            Consecutivo_textEdit.Text = string.Format("{0}/{1}", Proyectos.GetConsecutivo(), AConfiguracion.AnnoDeTrabajo);
            Consecutivo_textEdit.ForeColor = Color.OrangeRed;
            HabilitaTabsSecundarios(false);GlobalProyecto = new Proyectos();

        }

        private bool ManejaIconosDeTabs()
        {
            AGlobalDataContext.Refresh(RefreshMode.OverwriteCurrentValues);
            bool todoOk = ManejaIconoTabPrincipal();
            if (!ManejaIconoTabPresentaciones()) todoOk = false;
            if (!ManejaIconoTabIntegrantes()) todoOk = false;
            if (!ManejaIconoTabTextos()) todoOk = false;
            if (!ManejaIconoTabRepertorio()) todoOk = false;
            return todoOk;
        }

        private bool ManejaIconoTabPrincipal()
        {
            bool todoOk = ValidaTabPrincipal();Proyecto_xtraTabPage.Image = todoOk ? Resources.apply_16x16 : Resources.error_16x16;
            return todoOk;
        }

        private bool ManejaIconoTabIntegrantes()
        {
            string errorText = "Todo Ok";
            if (!(GlobalProyecto.ParticipantesDeProyectos.Any()||ParticipantesDeProyecto_gridView.RowCount>0))
            {
                errorText = "-No se han insertado integrantes al proyecto";
                IntegrantesErrorText_layoutControlItem.Image = Integrante_xtraTabPage.Image = Resources.error_16x16;
                ErrorTextIntegrantes_memoEdit.Text = errorText;
                ErrorTextIntegrantes_memoEdit.ForeColor = Color.DarkRed;
                return false;
            }
            if (EsTramiteMigratoElProyecto())
            {
                if (GlobalProyecto.ParticipantesDeProyectos.Any(c => c.TipoTramiteMigratorio == null))
                {
                    errorText = "-Existen Integrantes que aún no tiene definido el tramite a realizar";
                    IntegrantesErrorText_layoutControlItem.Image = Integrante_xtraTabPage.Image = Resources.error_16x16;
                    ErrorTextIntegrantes_memoEdit.Text = errorText;
                    ErrorTextIntegrantes_memoEdit.ForeColor = Color.DarkRed;
                    return false;
                }
            }
            ErrorTextIntegrantes_memoEdit.Text = errorText;
            ErrorTextIntegrantes_memoEdit.ForeColor = Color.Black;
            IntegrantesErrorText_layoutControlItem.Image = Integrante_xtraTabPage.Image = Resources.apply_16x16;
            return true;
        }
        private bool ManejaIconoTabPresentaciones()
        {
            bool todoOk = true;
            string[] errorText = new string[3];
             errorText[0] = "Todo Ok";
            if (!EsTramiteMigratoElProyecto())
            {
                if (!(GlobalProyecto.Presentacion.Any()||Presentacion_gridView.RowCount>0))
                {
                    errorText[0] = "";
                    errorText[1] = "-No se han definido presentaciones";
                    Presentaciones_xtraTabPage.Image = Integrante_xtraTabPage.Image = Resources.error_16x16;
                    todoOk = false;
                }
                if (EsComercialElProyecto()&&!Presentaciones_dxValidationProvider.Validate())
                {
                    errorText[0] = "";
                    errorText[2] = "-Verifique valores de las distribuciones";
                    Presentaciones_xtraTabPage.Image = Integrante_xtraTabPage.Image = Resources.error_16x16;
                    todoOk = false;

                }
            }
            ErrorPresentacionesText_memoEdit.Lines = errorText;
            Presentaciones_xtraTabPage.Image =ErrorPresentacionesTex_layoutControlItem.Image= todoOk ?  Resources.apply_16x16 : Resources.error_16x16;
            ErrorPresentacionesText_memoEdit.ForeColor = todoOk ? Color.Black : Color.DarkRed;
            return todoOk;
        }

        private bool ManejaIconoTabTextos()
        {
            bool todoOk = true;
            string[] errorText = new string[3];
            errorText[0] = "Todo Ok";
            if (string.IsNullOrEmpty(CausaDeProyectoMemoEdit.Text))
            {
                errorText[0] =
                    "- No se ha generado el texto para la fundamentacion del proyecto que se envía al departamento de Tramites";
                todoOk = false;
            }
            if (EsComercialElProyecto() || EsPromocionalElProyecto())
            {
                if (string.IsNullOrEmpty(Resumen_memoEdit.Text))
                {
                    errorText[1] = "-No se ha generado el texto Resumen del proyecto para el ICM";
                    todoOk = false;
                }
                if (!EstaOkTextoHablitacionDePasaportes())
                {
                    errorText[2] = "-No se ha generado el texto para la habilitacion del pasaporte";
                    todoOk = false;
                }
                
            }
           // todoOk = EsTramiteMigratoElProyecto() && !string.IsNullOrEmpty(CausaDeProyectoMemoEdit.Text) || !string.IsNullOrEmpty(Resumen_memoEdit.Text) && !string.IsNullOrEmpty(CausaDeProyectoMemoEdit.Text) && EstaOkTextoHablitacionDePasaportes();
            Textos_xtraTabPage.Image =ErrorTextos_layoutControlItem.Image = todoOk ? Resources.apply_16x16 : Resources.error_16x16;
            ErrorTextos_memoEdit.ForeColor = todoOk ? Color.Black : Color.DarkRed;
            if (!todoOk) errorText[0] = "";
            ErrorTextos_memoEdit.Lines = errorText;
            return todoOk;

        }

        /// <summary>
        /// Devuelve true si el proyecto no tiene ninguna solicitud de habilitacion de pasaportes 
        /// o si tiene solicitud y esta generado el texto para la hablitiacion de pasaportes.
        /// </summary>
        /// <returns></returns>
        private bool EstaOkTextoHablitacionDePasaportes()
        {
            if (GlobalProyecto.ParticipantesDeProyectos.Any(c => c.TipoTramiteMigratorio != null))
            {
                return !string.IsNullOrEmpty(CausaHabilitacionPasaportes_memoEdit.Text);
            }
            return true;
        }

        private bool ManejaIconoTabRepertorio()
        {
            string errorText = "Todo Ok";
            if (!EsTramiteMigratoElProyecto() && !GlobalProyecto.Repertorio.Any())
            {
                errorText = "-No se han Seleccionado canciones para el repertorio";
                ErrorTextRepertorio_layoutControlItem.Image = RepertorioProyecto_xtraTabPage.Image = Resources.error_16x16;
                ErrorTextRepertorio_memoEdit.Text = errorText;
                return false;
            }

            //bool todoOk = EsTramiteMigratoElProyecto() || EsComercialElProyecto() && Presentacion_gridView.RowCount > 0 && Presentaciones_dxValidationProvider.Validate() || EsPromocionalElProyecto() && Presentacion_gridView.RowCount > 0;
            ErrorTextRepertorio_layoutControlItem.Image = RepertorioProyecto_xtraTabPage.Image = Resources.apply_16x16;
            ErrorTextRepertorio_memoEdit.Text = errorText;
            ErrorTextRepertorio_memoEdit.ForeColor = Color.Black;
            return true;
        }


        


        private void HabilitaTabsSecundarios(bool b)
        {
            CartaDeInvitacion_xtraTabPage.PageEnabled =
                Invitado_xtraTabPage.PageEnabled =
                    Presentaciones_xtraTabPage.PageEnabled =
                        RepertorioProyecto_xtraTabPage.PageEnabled = Integrante_xtraTabPage.PageEnabled = Textos_xtraTabPage.PageEnabled = b;

        }

        /// <summary>
        /// Constructor que se llama para la edicion de un proyecto desde la ventana de las listas de proyectos
        /// </summary>
        /// <param name="aProyecto"></param>
        public NewProyectForm(Proyectos aProyecto, NegocioDataContext aDataContext)
        {
            AGlobalDataContext = aDataContext ?? new NegocioDataContext();
            try
            {
                SplashScreenManager.ShowForm(MdiParent, typeof(WaitForm1), true, true);
            }
            catch (Exception)
            {

                SplashScreenManager.CloseForm();
                SplashScreenManager.ShowForm(MdiParent, typeof(WaitForm1), true, true);

            }

            InitializeComponent();
            AConfiguracion = DynamicQueryable.FirstOrDefault(AGlobalDataContext.ConfiguracionGeneral);
            GlobalProyecto = aProyecto;
            if (GlobalProyecto != null)
            {
                Consecutivo_textEdit.Text = string.Format("{0}/{1}", GlobalProyecto.Consecutivo, AConfiguracion.AnnoDeTrabajo);
                ATipoProyecto = GlobalProyecto.EnumTipoProyecto;
                if (ATipoProyecto != Enumerados.TipoProyecto.TramiteMigratorio)
                    Invitados_gridView.Columns["TipoTramiteMigratorio"].Visible = false;
                ConformaControlesEnumerados();
                PopulaControles();
                HabilitaTabsSecundarios(true);
                if (GlobalProyecto.NombreProyecto != null)
                    NombreProycto_textEdit.Text = GlobalProyecto.NombreProyecto.Trim();
                proyectoIDToolStripTextBox.Text = GlobalProyecto.ProyectoID.ToString();
                AgrupacionIdLookUpEdit.EditValue = GlobalProyecto.AgrupacionId;
                ClientesLookUpEdit.EditValue = GlobalProyecto.ControlClienteId;
                PaisIdLookUpEdit.EditValue = GlobalProyecto.PaisId;
                MonedaProyecto_lookUpEdit.EditValue = GlobalProyecto.TipoMonedaId;
                if (aProyecto.FechaInicial != null) FechaInicialDateEdit.DateTime = (DateTime)aProyecto.FechaInicial;
                if (aProyecto.FechaFinal != null) FechaFinalDateEdit.DateTime = (DateTime)aProyecto.FechaFinal;
                if (GlobalProyecto.CausaDeProyecto != null)
                    CausaDeProyectoMemoEdit.Text = GlobalProyecto.CausaDeProyecto;
                if (GlobalProyecto.PasajesPagadosPor != null)
                    PasajesPagadosPorTextEdit.Text = GlobalProyecto.PasajesPagadosPor;
                FechaConfeccionDateEdit.DateTime = GlobalProyecto.FechaConfeccion;
                if (GlobalProyecto.MotivoDeInvitacion != null)
                    MotivoInvitacion_textEdit.EditValue = GlobalProyecto.MotivoDeInvitacion;
                //IntegrantegridControl.DataSource = _GlobalDataContext.ParticipantesDeProyectos.Where(c => c.ProyectoId == GetProyectoId() && c.TipoParticipante.Trim() == Enumerados.TipoParticipante.Integrante.ToString());
                CartaInvitacion_gridControl.DataSource =
                    AGlobalDataContext.CartasDeInvitacion.Where(c => c.ProyectoId == GlobalProyecto.ProyectoID)
                        .Select(a => a.Imagenes);
                Invitados_gridControl.Enabled = true;
                IntegrantegridControl.Enabled = true;
                CartaInvitacion_gridControl.Enabled = true;
                // EspecialistaIdLookUpEdit.EditValue = _GlobalProyecto.EspecialistaId;
                TipoProyectoLookupEdit.EditValue = GlobalProyecto.TipoProyectoId;
                Empresario_checkedComboBoxEdit.Text = GlobalProyecto.EmpresarioAsume;
                if (aProyecto.RegimenDeTrabajo != null)
                    RegimenDeTrabajo_textEdit.EditValue = GlobalProyecto.RegimenDeTrabajo.Trim();
                presentacionBindingSource.DataSource =
                    AGlobalDataContext.Presentacion.Where(c => c.ProyectoId == GetProyectoId());
                TotalCachet_textEdit.EditValue = GetTotalCachet();
                TotalArtista_textEdit.EditValue = GlobalProyecto.IngresoUnidadArtistica;
                TotalEmpresa_textEdit.EditValue = GlobalProyecto.IngresoAgencia;
                CausaDeProyectoMemoEdit.Text = GlobalProyecto.CausaDeProyecto;

                Ciudades_textEdit.EditValue = GlobalProyecto.Ciudad;
                PopulaIntegrantesDeProyectos();
                CausaDeProyectoMemoEdit.Text = GlobalProyecto.CausaDeProyecto;
                CausaHabilitacionPasaportes_memoEdit.Text = GlobalProyecto.CausaHabilitacionPasaporte;
                Resumen_memoEdit.Text = GlobalProyecto.ResumenProyecto;

                if (GlobalProyecto.TipoPasaporte != null)
                    TipoPasaporte_lookUpEdit.EditValue = GlobalProyecto.TipoPasaporte;

                if (GlobalProyecto.ImportanciaProyecto != null)
                    Importancia_memoExEdit.Text = GlobalProyecto.ImportanciaProyecto;

                if (GlobalProyecto.MotivoPasaporteOficial != null)
                    CausaPasaporteOf_memoExEdit.Text = GlobalProyecto.MotivoPasaporteOficial;
            }
            ActualizaDistribucionDeProyecto();
            if (!ManejaIconosDeTabs())
            {
                MuestraMensajeDeAdvertenciaDeErrores();
            }
            
            //  bindingSource5.DataSource = _GlobalDataContext.DocumentosInvitados.Where(c=>c.ParticipantesDeProyectos.ProyectoId ==GetProyectoId()).Select(c=>c.Imagenes).OrderBy(c=>c.Orden);
        }

        private void MuestraMensajeDeAdvertenciaDeErrores()
        {

            Utils.MuestraInformacion("Por favor, para garantizar que el reporte de su proyecto se visualice sin problemas,<br>usted debe corregir los valores insertados en las pestañas   con el icono de los números en rojos,<br>los tabs que tienen los iconos en verde indican que sus datos no presentan problemas");

        }

        private void PopulaIntegrantesDeProyectos()
        {
            if (GlobalProyecto == null) return;
            //participantesDeProyectosBindingSource.DataSource =
            //    _GlobalDataContext.ParticipantesDeProyectos.Where(
            //        c => c.ProyectoId == GlobalProyecto.ProyectoID && c.Artista.AgrupacionDeArtista.Any(a => a.AgrupacionId == GlobalProyecto.AgrupacionId));
            //participantesDeProyectosBindingSource1.DataSource =
            //   _GlobalDataContext.ParticipantesDeProyectos.Where(
            //       c => c.ProyectoId == GlobalProyecto.ProyectoID && !(c.Artista.AgrupacionDeArtista.Any(a => a.AgrupacionId == GlobalProyecto.AgrupacionId)));
            participantesDeProyectosBindingSource.DataSource =
                AGlobalDataContext.ParticipantesDeProyectos.Where(c => c.ProyectoId == GlobalProyecto.ProyectoID);
            IntegrantesTab.Text = String.Format("Integrantes ({0})", participantesDeProyectosBindingSource.Count);
            // Invitado_xtraTabPage.Text = String.Format("Invitados ({0})", participantesDeProyectosBindingSource1.Count);
            //Integrantes_gridView.RefreshData();
            //Invitados_gridView.RefreshData();

        }
        private void PopulaControles(){
            try
            {
                ConformaControlesEnumerados();
                paisesBindingSource.DataSource = AGlobalDataContext.Paises;
                tipoMonedaBindingSource.DataSource = AGlobalDataContext.TipoMoneda;
                empresariosBindingSource.DataSource = AGlobalDataContext.Empresarios;
                PopulaAgrupacion();
                controlClientesBindingSource.DataSource = AGlobalDataContext.ControlClientes.OrderBy(c => c.NumeroContrato);
                responsabilidadEmpresarioBindingSource.DataSource = AGlobalDataContext.ResponsabilidadEmpresario;
                PopulaTipoTramiteMigratorioLookUpEdit();
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void NewProyectForm_Load(object sender, EventArgs e)
        {
            try
            {
                SplashScreenManager.CloseForm();
                spellChecker1.SpellCheckMode = SpellCheckMode.AsYouType;
                spellChecker1.Check(CausaDeProyectoMemoEdit);
                spellChecker1.Check(CausaHabilitacionPasaportes_memoEdit);
                spellChecker1.Check(Resumen_memoEdit);
            }
            catch
            {
                //No pasa nada
            }

        }

        //private void buttonEdit1_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        //{

        //    if (e.Button.IsLeft)
        //    {
        //       
        //    }
        //    else
        //    {
        //        var _SelectedItems = Integrantes_checkedListBox.SelectedItems;
        //        foreach (var _SelectedItem in _SelectedItems)
        //        {
        //            SmallArtista _Small = (SmallArtista)_SelectedItem;
        //            ParticipantesLista.Remove(_Small);
        //        }
        //        //Integrantes_checkedListBox.DataSource = ParticipantesLista;
        //        //Integrantes_checkedListBox.ResetBindings();
        //        //Integrantes_checkedListBox.Refresh();


        //    }
        //}
        /// <summary>
        /// Inserta un nuevo empresario
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        //private void NuevoEmpresario_Click(object sender, EventArgs e)
        //{
        //    EmpresariosForm _EmpresarioForm = new EmpresariosForm();
        //    if (_EmpresarioForm.ShowDialog() == DialogResult.OK)
        //    {
        //        Empresarios _Empresario = _GlobalDataContext.Empresarios.ToList().LastOrDefault();
        //        //_GlobalDataContext.Empresarios.InsertOnSubmit(_NuevoEmpresario);
        //        //_GlobalDataContext.SubmitChanges();
        //        ClientesLookUpEdit.Properties.DataSource = null;
        //        ClientesLookUpEdit.Properties.DataSource = _GlobalDataContext.Empresarios.ToList();
        //        ClientesLookUpEdit.Refresh();
        //        ClientesLookUpEdit.EditValue = _Empresario.EmpresarioID;
        //        ClientesLookUpEdit.Text = _Empresario.NombreYApellidos;
        //        _EmpresarioForm.Dispose();
        //    }

        //}

        private void SalvarYSalir_buttonEdit_Click(object sender, EventArgs e)
        {
            SalvarCambios();
            DialogResult = DialogResult.OK;
            Dispose();
        }

        /// <summary>
        /// Insertar País
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void NuevoPaisButton_Click(object sender, EventArgs e)
        {
            NuevoPaisForm nuevoPaisForm = new NuevoPaisForm();
            if (nuevoPaisForm.ShowDialog(this) == DialogResult.OK)
            {
                Paises nuevoPais = nuevoPaisForm.PaisNuevo;
                AGlobalDataContext.Paises.InsertOnSubmit(nuevoPais);
                AGlobalDataContext.SubmitChanges();
                PaisIdLookUpEdit.Properties.DataSource = null;
                PaisIdLookUpEdit.Properties.DataSource = AGlobalDataContext.Paises.ToList();
                PaisIdLookUpEdit.Refresh();
                PaisIdLookUpEdit.EditValue = nuevoPais.PaisID;
                PaisIdLookUpEdit.Text = nuevoPais.NombrePais;
                nuevoPaisForm.Dispose();
            }
        }


       

        /// <summary>
        /// 
        /// </summary>
        /// <param name="participantesDeProyectos"></param>
        /// <returns>Devuelve el Id de la carta de Invitacion Guardada</returns>
        //private int? SalvarImagenes()
        //{
        // //var ImageEditControls =   CartaInvitaciongroupControl.Controls;
        // //   foreach (var _ImageEditControl in ImageEditControls)
        // //   {
        // //       var Imagen = ((ImageEdit) _ImageEditControl).Image;
        // //   }
        // //   //Obtengo las imagenes que estan en el CartaDeInvitacionGroup
        // //   Binary binary = null;
        // //   using (MemoryStream ms = new MemoryStream())
        // //   {
        // //       if (pictureEdit1.Image != null)
        // //       {
        // //           pictureEdit1.Image.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
        // //           binary = new System.Data.Linq.Binary(ms.GetBuffer());
        // //       }
        // //       Artista _Artista = new Artista
        // //       {
        // //           Nombre = teNombres.Text,
        // //           PrimerApellido = teApellidoPat.Text,
        // //           SegundoApellido = teApellidoMat.Text,
        // //           StatusLaboral = teStatusLaboral.Text,
        // //           Carnet_de_Identidad = teCi.Text,
        // //           FechaIngresoSector = dateEFechaIngreso.DateTime,
        // //           Imagen =binary==null?null: binary.ToArray()
        // //       };

        //}

        //private bool EditRecord()
        //{
        //    PopupParticipanteForm frm = new PopupParticipanteForm();
        //    if (Invitados_gridView.GetSelectedRows().Count() > 0)
        //    {
        //        var _SelectedRow = Invitados_gridView.GetSelectedRows()[0];
        //        ParticipantesDeProyectos _Participante = (ParticipantesDeProyectos)(Invitados_gridView.GetRow(_SelectedRow));
        //        frm.InitData(FindForm(), _Participante);
        //        bool ret = frm.ShowDialog() == DialogResult.OK;
        //        if (ret)
        //        {
        //            ParticipantesDeProyectos _ParticipanteResult = frm.Participante;
        //            InvitadosLista[_SelectedRow] = _ParticipanteResult;
        //        }
        //        return ret;
        //    }//    return false;


        //}

        private void Invitados_EmbeddedNavigator_ButtonClick(object sender,
            DevExpress.XtraEditors.NavigatorButtonClickEventArgs e)
        {

            if (e.Button.ButtonType == NavigatorButtonType.Append)
            {
                // List<ParticipantesDeProyectos> Integrantes = ((IEnumerable<ParticipantesDeProyectos>)Integrantes_gridView.DataSource).ToList();
                InsertaNuevosIntegrantes();
            }
            else if (e.Button.ButtonType == NavigatorButtonType.Remove)
            {
                EliminaIntegrantes();
                e.Handled = true;
            }

            e.Handled = true;


            //if (e.Button.ButtonType == DevExpress.XtraEditors.NavigatorButtonType.Edit)
            //{
            //    // ParticipantesDeProyectos _Participante = (ParticipantesDeProyectos)(Invitados_gridView.GetRow(Invitados_gridView.GetSelectedRows()[0]));

            //    EditRecord();
            //    e.Handled = true;
            //}
            //if (e.Button.ButtonType == DevExpress.XtraEditors.NavigatorButtonType.Append)
            //{
            //    PopupParticipanteForm frm = new PopupParticipanteForm();
            //    if (frm.ShowDialog() == DialogResult.OK)
            //    {
            //        InvitadosLista.Add(frm.Participante);

            //        //Invitados_gridControl.DataSource = InvitadosLista;
            //        Invitados_gridControl.DataSource = ToInEnumerable(InvitadosLista);
            //        Invitados_gridControl.Refresh();
            //        // Invitados_gridView.DataSource = IntegrantesLista;
            //        // Invitados_gridView.RefreshData();
            //    } //Invitados_gridView.AddNewRow();

            //    //if (EditRecord( new ParticipantesDeProyectos()))
            //    //    Invitados_gridView.UpdateCurrentRow();
            //    //else Invitados_gridView.CancelUpdateCurrentRow();
            //    e.Handled = true;
            //}
        }

        /// <summary>
        /// True si se trabaja sobre invitados
        /// </summary>
        /// <param name="invitados"></param>
        private void EliminaIntegrantes(bool invitados = false)
        {
            var grid = ParticipantesDeProyecto_gridView;
            int[] filas = grid.GetSelectedRows();
            foreach (var fila in filas)
            {
                ParticipantesDeProyectos participante =
                    (ParticipantesDeProyectos)grid.GetRow(fila);
                AGlobalDataContext.ParticipantesDeProyectos.DeleteOnSubmit(participante);
            }
            AGlobalDataContext.SubmitChanges();
            PopulaIntegrantesDeProyectos();
        }

        private void InsertaNuevosIntegrantes()
        {
            if (AgrupacionIdLookUpEdit.EditValue == null) return;
            int nombreGrupo = Convert.ToInt32(AgrupacionIdLookUpEdit.EditValue);
            ArtistasForm integrantesForm = new ArtistasForm(nombreGrupo);
            integrantesForm.InsertInegrante_buttonEdit.Visible = true;
            // _IntegrantesForm.SelectGroup(_GrupoId);
            try
            {
                if (integrantesForm.ShowDialog() == DialogResult.OK)
                {
                    if (integrantesForm.Artista_gridView.GetSelectedRows().Count() > 0)
                    {
                        List<AgrupacionDeArtista> artistas = new List<AgrupacionDeArtista>();

                        var selectedRows = integrantesForm.Artista_gridView.GetSelectedRows();
                        foreach (var selectedRow in selectedRows)
                        {
                            AgrupacionDeArtista agrupacionDeArtista = (AgrupacionDeArtista)(integrantesForm.Artista_gridView.GetRow(selectedRow));
                            if (
                                !AGlobalDataContext.ParticipantesDeProyectos.Any(
                                    c =>
                                        c.Artista.CarnetIdentidad == agrupacionDeArtista.Artista.CarnetIdentidad &&
                                        c.ProyectoId == GetProyectoId()))
                                artistas.Add(agrupacionDeArtista);
                        }
                        var nuevosParticipantes =
                            artistas.Select(c => c.ToParticipante(GetProyectoId())).ToList();
                        AGlobalDataContext.ParticipantesDeProyectos.InsertAllOnSubmit(nuevosParticipantes);
                        AGlobalDataContext.SubmitChanges();
                        PopulaIntegrantesDeProyectos();
                    }
                }
            }
            catch (Exception)
            {
                
               Utils.MuestraError("Error en la operación, esto ocurre normalmente porque uno de los artistas seleccionados le falta algún dato por insertar");
            }
        }


        public IEnumerable<ParticipantesDeProyectos> ToInEnumerable(
            List<ParticipantesDeProyectos> aParticipantesDeProyectoseList)
        {
            return aParticipantesDeProyectoseList;
        }

        //private void Invitados_gridControl_DoubleClick(object sender, EventArgs e)
        //{
        //    PopupParticipanteForm frm = new PopupParticipanteForm();
        //    frm.TipoParticipanteLookUpEdit.EditValue = (int)Enumerados.TipoParticipante.Invitado;
        //    frm.TipoParticipanteLookUpEdit.Enabled = false;
        //    if (frm.ShowDialog() == DialogResult.OK)
        //    {
        //        InvitadosLista.Add(frm.Participante);
        //        //Invitados_gridControl.DataSource = InvitadosLista;
        //        Invitados_gridControl.DataSource = ToInEnumerable(InvitadosLista);
        //        Invitados_gridControl.Refresh();
        //        // Invitados_gridView.DataSource = IntegrantesLista;
        //        // Invitados_gridView.RefreshData();
        //    } //Invitados_gridView.AddNewRow();
        //}

        /// <summary>
        /// Salva los datos principales del proyecto
        /// 
        /// </summary> <returns>Devuelve el Id del proyecto si no hay error de lo contrario devuelve -1;</returns>
        public Guid SalvarCabeceraProyecto(out bool ok)
        {
            try
            {
                AGlobalDataContext = new NegocioDataContext();
                GlobalProyecto =AGlobalDataContext.Proyectos.FirstOrDefault(c => c.ProyectoID == GetProyectoId());
                GlobalProyecto = GlobalProyecto ?? new Proyectos();
                GlobalProyecto.AgrupacionId = (int)AgrupacionIdLookUpEdit.EditValue;
                GlobalProyecto.NombreProyecto = NombreProycto_textEdit.Text.Trim();
                GlobalProyecto.CausaDeProyecto = string.IsNullOrEmpty(CausaDeProyectoMemoEdit.Text)
                    ? ""
                    : CausaDeProyectoMemoEdit.Text.Trim();
                GlobalProyecto.FechaConfeccion = FechaConfeccionDateEdit.DateTime;
                if (!string.IsNullOrEmpty(PasajesPagadosPorTextEdit.Text))
                    GlobalProyecto.PasajesPagadosPor = PasajesPagadosPorTextEdit.EditValue.ToString().Trim();
                if (ClientesLookUpEdit.EditValue != null)
                    GlobalProyecto.ControlClienteId = (int)ClientesLookUpEdit.EditValue;
                GlobalProyecto.FechaInicial = FechaInicialDateEdit.DateTime;
                GlobalProyecto.FechaFinal = FechaFinalDateEdit.DateTime;
              
                //     TipoProyecto = Enum.GetName(typeof(Enumerados.TipoProyecto),Convert.ToInt32(TipoProyectoId_labelControl.Text))
                GlobalProyecto.TipoProyectoId = Convert.ToInt32(TipoProyectoLookupEdit.EditValue);

                if (PaisIdLookUpEdit.EditValue != null) GlobalProyecto.PaisId = Convert.ToInt32(PaisIdLookUpEdit.EditValue);
                // _GlobalProyecto.EspecialistaId = (int)EspecialistaIdLookUpEdit.EditValue;
                GlobalProyecto.EmpresarioAsume = Empresario_checkedComboBoxEdit.Text.Trim();
                if (RegimenDeTrabajo_textEdit.EditValue != null)
                    GlobalProyecto.RegimenDeTrabajo = RegimenDeTrabajo_textEdit.EditValue.ToString().Trim();
                if (TotalArtista_textEdit.EditValue != null)
                    if (!(string.IsNullOrEmpty(TotalArtista_textEdit.EditValue.ToString())))
                        GlobalProyecto.IngresoUnidadArtistica = Convert.ToDecimal(TotalArtista_textEdit.EditValue);
                if (TotalEmpresa_textEdit.EditValue != null)
                    if (!string.IsNullOrEmpty(TotalEmpresa_textEdit.EditValue.ToString()))
                        GlobalProyecto.IngresoAgencia = Convert.ToDecimal(TotalEmpresa_textEdit.EditValue);
                if (TotalCachet_textEdit.EditValue != null)
                    if (!string.IsNullOrEmpty(TotalCachet_textEdit.EditValue.ToString()))
                        try
                        {
                            GlobalProyecto.ValorDelContrato = Convert.ToDecimal(TotalArtista_textEdit.EditValue) +
                                                                              Convert.ToDecimal(TotalEmpresa_textEdit.EditValue);
                        }
                        catch (Exception)
                        {

                            GlobalProyecto.ValorDelContrato = 0;
                        }
                GlobalProyecto.Ciudad = Convert.ToString(Ciudades_textEdit.EditValue);
                GlobalProyecto.TipoMonedaId = Convert.ToInt32(MonedaProyecto_lookUpEdit.EditValue);
                if (MotivoInvitacion_textEdit.EditValue != null) GlobalProyecto.MotivoDeInvitacion = Convert.ToString(MotivoInvitacion_textEdit.EditValue).Trim();
                if (Importancia_memoExEdit.EditValue != null)
                    GlobalProyecto.ImportanciaProyecto = Convert.ToString(Importancia_memoExEdit.EditValue).Trim();
                if (TipoPasaporte_lookUpEdit.EditValue != null)
                    GlobalProyecto.TipoPasaporte = Convert.ToInt32(TipoPasaporte_lookUpEdit.EditValue);
                if (GlobalProyecto.ProyectoID == Guid.Empty)
                {
                    GlobalProyecto.ProyectoID = Guid.NewGuid();
                    GlobalProyecto.Anno = AConfiguracion.AnnoDeTrabajo;
                    GlobalProyecto.Consecutivo = Proyectos.GetConsecutivo();
                    AGlobalDataContext.Proyectos.InsertOnSubmit(GlobalProyecto);
                }
                Consecutivo_textEdit.Text = string.Format("{0}/{1}", GlobalProyecto.Consecutivo, AConfiguracion.AnnoDeTrabajo);//lo vuelvo a poner para que en caso de que hayan usado ya el consecutivo otro usuario actualizar el mismo y no repertirlo
                Consecutivo_textEdit.ForeColor = Color.MediumBlue;
                GlobalProyecto.MotivoDeInvitacion = Convert.ToString(MotivoInvitacion_textEdit.EditValue);
                GlobalProyecto.ResumenProyecto = Resumen_memoEdit.Text;
                GlobalProyecto.CausaHabilitacionPasaporte = CausaHabilitacionPasaportes_memoEdit.Text;
                GlobalProyecto.CausaDeProyecto = CausaDeProyectoMemoEdit.Text;
                if (GlobalProyecto.TipoPasaporte == (int) Enumerados.TipoPasaporte.Oficial)
                    if (CausaPasaporteOf_memoExEdit.EditValue!=null)
                    GlobalProyecto.MotivoPasaporteOficial = Convert.ToString(CausaPasaporteOf_memoExEdit.EditValue);
                //if (PaisIdLookUpEdit.EditValue == null)
                //{
                //    GlobalProyecto.PaisId = Paises.PaisIdDeCuba;
                //}
                AGlobalDataContext.SubmitChanges();
                ACambiosPendientes = false;
                HabilitaTabsSecundarios(true);
                PopulaControles(); //esto para popular los controles que no estan hasta el momento usandose
                ok = true;
                return GlobalProyecto.ProyectoID;
            }
            catch (Exception)
            {
                ok = false;
                return new Guid();
            }

        }


        //public void SalvarCartaInvitacion()
        //{
        //    try
        //    {

        //        if (GetProyectoId() < 0) return;
        //        //elimino cualquiera que existiera antes
        //        _GlobalDataContext.CartasDeInvitacion.DeleteAllOnSubmit((_GlobalDataContext.CartasDeInvitacion.Where(c => c.ProyectoId == GetProyectoId())));
        //        //cojo las imagenes del grid carta de invitacion ahora y las inserto
        //        IEnumerable<Imagenes> _Imagenes = (IEnumerable<Imagenes>) CartaInvitacion_gridView.DataSource;
        //        if (_Imagenes.Count() > 1)
        //            foreach (Imagenes _Imagen in _Imagenes)
        //            {
        //                CartasDeInvitacion _CartaInvitacion = new CartasDeInvitacion();
        //                _CartaInvitacion.ProyectoId = GetProyectoId();
        //                _CartaInvitacion.ImagenId = _Imagen.ImagenID;
        //                _GlobalDataContext.CartasDeInvitacion.InsertOnSubmit(_CartaInvitacion);
        //            }
        //        _GlobalDataContext.SubmitChanges();
        //    }
        //    catch (Exception) {

        //        throw;
        //    }


        //}


        private void fillByToolStripButton_Click(object sender, EventArgs e)
        {
            try
            {
                // this.imagenesTableAdapter1.FillBy(this.artistasDataSet.Imagenes, new System.Nullable<int>(((int)(System.Convert.ChangeType(proyectoIDToolStripTextBox.Text, typeof(int))))));
            }
            catch (System.Exception ex)
            {
                System.Windows.Forms.MessageBox.Show(ex.Message);
            }

        }

        private void CartaInvitacion_gridView_RowUpdated(object sender,
            DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            try
            {
                AGlobalDataContext.SubmitChanges();

                var imagenId = ((Imagenes)e.Row).ImagenID;
                AGlobalDataContext.CartasDeInvitacion.InsertOnSubmit(new CartasDeInvitacion
                {
                    ImagenId = imagenId,
                    ProyectoId = GetProyectoId()
                });
                AGlobalDataContext.SubmitChanges();
            }
            catch (Exception exception)
            {

                MessageBox.Show(exception.Message);
            }

        }

        private void IntegrantegridControl_EmbeddedNavigator_ButtonClick(object sender, NavigatorButtonClickEventArgs e)
        {
            if (e.Button.ButtonType == NavigatorButtonType.Append)
            {
                // List<ParticipantesDeProyectos> Integrantes = ((IEnumerable<ParticipantesDeProyectos>)Integrantes_gridView.DataSource).ToList();
                if (AgrupacionIdLookUpEdit.EditValue == null) return;
                int nombreGrupo = Convert.ToInt32(AgrupacionIdLookUpEdit.EditValue);
                ArtistasForm integrantesForm = new ArtistasForm(nombreGrupo, AGlobalDataContext);
                integrantesForm.InsertInegrante_buttonEdit.Visible = true;
                // _IntegrantesForm.SelectGroup(_GrupoId);
                if (integrantesForm.ShowDialog() == DialogResult.OK &&
                    integrantesForm.Artista_gridView.GetSelectedRows().Count() > 0)
                {
                    // List<Artista> _Artistas = new List<Artista>();
                    var selectedRows = integrantesForm.Artista_gridView.GetSelectedRows();
                    foreach (var selectedRow in selectedRows)
                    {

                        AgrupacionDeArtista agrupacionDeArtista =
                            (AgrupacionDeArtista)(integrantesForm.Artista_gridView.GetRow(selectedRow));
                        if (!AGlobalDataContext.ParticipantesDeProyectos.Any(
                            c => c.Artista.CarnetIdentidad == agrupacionDeArtista.Artista.CarnetIdentidad &&
                                 c.ProyectoId == GetProyectoId()))
                        {
                            var participante = agrupacionDeArtista.ToParticipante(GlobalProyecto.ProyectoID);
                            AGlobalDataContext.ParticipantesDeProyectos.InsertOnSubmit(participante);
                        }
                    }
                    //var _NuevosParticipantes = _Artistas.Select(c => c.ToParticipante(GetProyectoId(), _Configuracion.Agencia))
                    //                .ToList();
                    //        _GlobalDataContext.ParticipantesDeProyectos.InsertAllOnSubmit(_NuevosParticipantes);
                    AGlobalDataContext.SubmitChanges();
                    PopulaIntegrantesDeProyectos();
                    e.Handled = true;
                }



            }
            else if (e.Button.ButtonType == NavigatorButtonType.Remove)
            {
                int[] filas = Integrantes_gridView.GetSelectedRows();
                foreach (var fila in filas)
                {
                    ParticipantesDeProyectos participante =
                        (ParticipantesDeProyectos)Integrantes_gridView.GetRow(fila);
                    AGlobalDataContext.ParticipantesDeProyectos.DeleteOnSubmit(participante);
                    Invitados_GridControlInitData();
                }
                AGlobalDataContext.SubmitChanges();
                Integrantes_GridControlInitData();
                e.Handled = true;
            }

            e.Handled = true;
        }


        private void LookUpEdit_TextChanged(object sender, EventArgs e)
        {

        }

        private void Integrantes_GridControlInitData()
        {
            IntegrantegridControl.DataSource =
                AGlobalDataContext.ParticipantesDeProyectos.Where(c => c.ProyectoId == GetProyectoId())
                    .OrderBy(c => c.Artista.Orden);
            if (GlobalProyecto.GetInvitados().Count > 0) Invitados_GridControlInitData();
        }

        private void Invitados_GridControlInitData()
        {
            try
            {
                Invitados_gridControl.DataSource = GlobalProyecto.GetInvitados();
            }
            catch (Exception)
            {

                throw;
            }
        }


        private void TipoProyectoLookupEdit_EditValueChanged(object sender, EventArgs e)
        {
            var valor = Convert.ToInt32(TipoProyectoLookupEdit.EditValue);
            //ATipoProyecto = Enumerados.EnumTipoProyecto(valor);

            ClientesLookUpEdit.Enabled = PaisIdLookUpEdit.Enabled = FechaInicialDateEdit.Enabled = FechaFinalDateEdit.Enabled =
            PasajesPagadosPorTextEdit.Enabled = //CartaDeInvitacion_xtraTabPage.PageVisible =
            Empresario_checkedComboBoxEdit.Enabled = RepertorioProyecto_xtraTabPage.PageVisible = Presentaciones_xtraTabPage.PageVisible =
             ClientesLookUpEdit.Enabled = RegimenDeTrabajo_textEdit.Enabled = 
            MotivoInvitacion_textEdit.Enabled = Ciudades_textEdit.Enabled = Resumen_memoEdit.Enabled = GenerarResumen_simpleButton.Enabled = 
            CausaHabilitacionPasaportes_memoEdit.Enabled = GenerarTextHabPasaportes_simpleButton.Enabled =!EsTramiteMigratoElProyecto();

            if (valor == Convert.ToInt32(Enumerados.TipoProyecto.ProyectoNacional))
            {
                PaisIdLookUpEdit.EditValue = Paises.PaisIdDeCuba;
                PaisIdLookUpEdit.Enabled = false;
                PasajesPagadosPorTextEdit.Enabled = false;
                RegimenDeTrabajo_textEdit.Enabled = false;
                Empresario_checkedComboBoxEdit.Enabled = false; Empresario_checkedComboBoxEdit.Enabled = false;

            }

            //else
            //{
            //    PaisIdLookUpEdit.Enabled =
            //        FechaInicialDateEdit.Enabled =
            //            FechaFinalDateEdit.Enabled =
            //                PasajesPagadosPorTextEdit.Enabled =
            //                    ClientesLookUpEdit.Enabled =
            //                        CartaDeInvitacion_xtraTabPage.PageVisible =
            //                            Presentaciones_xtraTabPage.PageVisible =
            //                                Empresario_checkedComboBoxEdit.Enabled =
            //                                    RepertorioProyecto_xtraTabPage.PageVisible =
            //                                        Presentaciones_xtraTabPage.PageVisible =
            //                                            EmpresarioAsumeText_memoEdit.Enabled =
            //                                                ClientesLookUpEdit.Enabled =
            //                                                    RegimenDeTrabajo_textEdit.Enabled = true;

            //}
            ACambiosPendientes = ((LookUpEdit)sender).OldEditValue != ((LookUpEdit)sender).EditValue;
            // ConformaCausaDeProyecto();

        }

        private void ConformaTipoPoryectoControl()
        {
            //TipoProyectoLookupEdit.Properties.DataSource =
            //Enumerados.EnumToList(Enumerados.ProyectoEnumerados.TipoProyecto);
            TipoProyectoLookupEdit.Properties.DisplayMember = "Tipo";
            TipoProyectoLookupEdit.Properties.ValueMember = "Valor";
            TipoProyectoLookupEdit.Properties.KeyMember = "Valor";
            TipoProyectoLookupEdit.Properties.DataSource = Enumerados.ListaDeEnumerados(typeof (Enumerados.TipoProyecto));
        

        }

        private void ConformaTipoTramiteControl()
        {
            TipoTramiterepositoryItemLookUpEdit.DataSource =
                Enumerados.ListaDeEnumerados(typeof (Enumerados.TipoTramiteMigratorio));
                //Enumerados.EnumToList(Enumerados.ProyectoEnumerados.TipoProyectoMigratorio);
            TipoTramiterepositoryItemLookUpEdit.DisplayMember = "Tipo";
            TipoTramiterepositoryItemLookUpEdit.ValueMember = "Valor";

        }

        private void ConformaControlesEnumerados()
        {
            ConformaTipoPoryectoControl();
            ConformaTipoTramiteControl();
            TipoPasaporte_lookUpEdit.Properties.DataSource = Enumerados.ListaDeEnumerados(typeof (Enumerados.TipoPasaporte));
            TipoPasaporte_lookUpEdit.Properties.DisplayMember = "Tipo";
            TipoPasaporte_lookUpEdit.Properties.ValueMember = "Valor";
           // TipoPasaporte_lookUpEdit.Properties.DataSource = Utils.SetEnum(TipoPasaporte_lookUpEdit, typeof (Enumerados.TipoPasaporte));


        }


        private string ConformaCausaDeProyecto(Enumerados.TipoProyecto aTipoProyecto)
        {


            string causa = "La presente planilla de salida corresponde a ";

            switch (aTipoProyecto)
            {
                case Enumerados.TipoProyecto.TramiteMigratorio:
                    causa += "la necesidad de realizar ";
                    //var Integrantes = ((IEnumerable<ParticipantesDeProyectos>)Integrantes_gridView.DataSource).ToList();
                    //Integrantes.AddRange(((IEnumerable<ParticipantesDeProyectos>)Invitados_gridView.DataSource));
                    //var i = 0;
                    //foreach (var integrante in Integrantes)
                    //{
                    //    i++;
                    //    bool _EsUltimo = Integrantes.Count == i;
                    //    bool _EsPrimero = i == 1;
                    //    //La Confeccion de pasaporte de 
                    //    _Causa += string.Format("{0} {1} de {2}", !_EsPrimero ? " , " : "",
                    //        integrante.TipoTramiteMigratorio.SplitUpperCase().Replace("confeccion", "confección"),
                    //        integrante.NombreCompleto.TipoFrase());
                    //    if (_EsUltimo)
                    //    {
                    //        int _UltimaComaPos = _Causa.LastIndexOf(",");
                    //        StringBuilder _CausaFinal = new StringBuilder(_Causa);
                    //        if (_CausaFinal.Length > _UltimaComaPos && _UltimaComaPos > 0)
                    //            _CausaFinal[_UltimaComaPos] = 'y';
                    //        CausaDeProyectoMemoEdit.Text = _CausaFinal.ToString();
                    //        _CambiosPendientes = CausaDeProyectoMemoEdit.OldEditValue !=
                    //                             CausaDeProyectoMemoEdit.EditValue;
                    //    }
                    //}
                    causa += GlobalProyecto.GetTextoFundamentacionTramitesMigratorios(true);
                    break;
                default:

                    if (AgrupacionIdLookUpEdit.EditValue != null)
                        if (PaisIdLookUpEdit.EditValue != null)
                        {
                            var cliente =
                                AGlobalDataContext.ControlClientes.FirstOrDefault(
                                    c =>
                                        ClientesLookUpEdit.EditValue != null &&
                                        c.ControlClienteID == (int)ClientesLookUpEdit.EditValue);




                            causa +=
                                string.Format(
                                    " que hemos recibido invitación de la empresa {5} representada por {6} en condicion de {7}, " +
                                    "para que los integrantes de la agrupación {0} que se anexan en el listado adjunto viajen a {1}, " +
                                    "desde el {2} hasta el {3}  a cumplimentar {4} .",
                                    AgrupacionIdLookUpEdit.Text, PaisIdLookUpEdit.Text,
                                    (FechaInicialDateEdit.DateTime.ToString("D",
                                        CultureInfo.CreateSpecificCulture("es-ES"))),
                                    ((FechaFinalDateEdit.DateTime.ToString("D",
                                        CultureInfo.CreateSpecificCulture("es-ES")))),
                                    TipoProyectoLookupEdit.Text, cliente.NombreDeEntidad,
                                    cliente.Representante,
                                    cliente.CargoRepresentante);
                        }
                    break;
            }
            return causa;

        }


        private void SalvarCambios()
        {
            //    ConformaCausaDeProyecto();SalvarCabeceraProyecto();
            AGlobalDataContext.SubmitChanges();
            ACambiosPendientes = false;
        }

        private void Close_buttonEdit_Click(object sender, EventArgs e)
        {
            if (ACambiosPendientes)
            {

                if (XtraMessageBox.Show("Salvar antes de salir?", "Cambios  Pendientes", MessageBoxButtons.YesNo) == DialogResult.Yes)
                {
                    SalvarCambios();
                }

            }
            DialogResult = ACambiosRealizados ? DialogResult.OK : DialogResult.Cancel;
            Dispose();
        }

        private void EmpresarioIdLookUpEdit_EditValueChanged(object sender, EventArgs e)
        {

            ACambiosPendientes = ClientesLookUpEdit.OldEditValue != ClientesLookUpEdit.EditValue;
            var cliente =
                AGlobalDataContext.ControlClientes.FirstOrDefault(
                    c => c.ControlClienteID == Convert.ToInt32(ClientesLookUpEdit.EditValue));
           // FechaInicialDateEdit.Properties.MinValue = cliente != null && FechaConfeccionDateEdit.DateTime < cliente.FechaContrato ? cliente.FechaContrato : FechaConfeccionDateEdit.DateTime;
            //if (cliente != null)
            //    if (cliente.Vigencia != null) FechaInicialDateEdit.Properties.MaxValue = (DateTime)cliente.Vigencia;
        }


        private void Presentacion_GridInitData()
        {
           // Presentacion_gridControl.DataSource = _GlobalDataContext.Presentacion.Where(c => c.ProyectoId == GetProyectoId());
        }

        private void Repertorio_GridInitData()
        {
            int agrupacionId = Convert.ToInt32(AgrupacionIdLookUpEdit.EditValue);
            Cancion_gridControl.DataSource = AGlobalDataContext.Cancion.Where(c => c.AgrupacionId == agrupacionId);
            var cancionesDelProyecto =
                AGlobalDataContext.Repertorio.Where(c => c.ProyectoId == GetProyectoId()).Select(b => b.CancionId);
            foreach (var i in cancionesDelProyecto)
            {
                int rowHandle = Cancion_gridView.LocateByValue("CancionID", i);
                Cancion_gridView.SelectRow(rowHandle);
                if (rowHandle != DevExpress.XtraGrid.GridControl.InvalidRowHandle)
                    Cancion_gridView.FocusedRowHandle = rowHandle;
            }

        }

        private void AgrupacionIdLookUpEdit_EditValueChanged(object sender, EventArgs e)
        {
            var control = (LookUpEdit)sender;
            ACambiosPendientes = control.OldEditValue == control.EditValue;
            Repertorio_GridInitData();
        }

        

        private void NuevoTemasimpleButton_Click(object sender, EventArgs e)
        {
            Cancion_gridView.AddNewRow();
        }

        private void Cancion_gridView_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            try
            {
                int idInicial = 0;
                Cancion cancion = (Cancion)e.Row;
                idInicial = cancion.CancionID;
                if (idInicial == 0)
                {
                    cancion.AgrupacionId = Convert.ToInt32(AgrupacionIdLookUpEdit.EditValue);
                    AGlobalDataContext.Cancion.InsertOnSubmit(cancion);
                    AGlobalDataContext.SubmitChanges();
                    AGlobalDataContext.Repertorio.InsertOnSubmit(new Repertorio { CancionId = AGlobalDataContext.Cancion.ToList().LastOrDefault().CancionID, ProyectoId = GetProyectoId() });
                }
                AGlobalDataContext.SubmitChanges();
            }
            catch (Exception exception)
            {

                MessageBox.Show(exception.Message);
            }

        }

        private void Cancion_gridView_SelectionChanged(object sender, DevExpress.Data.SelectionChangedEventArgs e)
        {

            int rowHandle = e.ControllerRow; int cancionId = ((Cancion)(Cancion_gridView.GetRow(rowHandle))).CancionID;
            if (!Cancion_gridView.IsRowSelected(rowHandle))
            {
                if (!AGlobalDataContext.Repertorio.Any(c => c.CancionId == cancionId && c.ProyectoId == GetProyectoId())) return; 
                var cancionDelRepertorio =
                    AGlobalDataContext.Repertorio.FirstOrDefault(
                        c => c.CancionId == cancionId && c.ProyectoId == GetProyectoId());
                if (cancionDelRepertorio != null) AGlobalDataContext.Repertorio.DeleteOnSubmit(cancionDelRepertorio);
                Cancion_gridView.UnselectRow(rowHandle);
                AGlobalDataContext.SubmitChanges();
            }
            else
            {
                if (AGlobalDataContext.Repertorio.Any(c => c.CancionId == cancionId && c.ProyectoId == GetProyectoId())) return; 
                GlobalProyecto.Repertorio.Add((new Repertorio { CancionId = cancionId, ProyectoId = GetProyectoId() }));
                AGlobalDataContext.SubmitChanges();
            }
            
            ActualizaGlobalActividad();
            ManejaIconoTabRepertorio();
        }



        private void Empresario_checkedComboBoxEdit_EditValueChanged(object sender, EventArgs e)
        {
          //  if (!string.IsNullOrEmpty(Empresario_checkedComboBoxEdit.Text)) EmpresarioAsumeText_memoEdit.Text = Empresario_checkedComboBoxEdit.Text;
        }

        //private void PorCientoEmpresa_textEdit_EditValueChanged(object sender, EventArgs e)
        //{
        //    AAjustandoPorCientoAgencia = 1;
        //    if (IncluyePagoAgencia_checkEdit.Checked && SumaValidadora() == 1)
        //        if (TotalCachet_labelControl.Text != null)
        //        {

        //            PorCientoArtista_textEdit.Text = (1 - Convert.ToDecimal(PorCientoEmpresa_textEdit.EditValue)).ToString();
        //            TotalEmpresa_textEdit.Text = ((Convert.ToDecimal(PorCientoEmpresa_textEdit.EditValue)) *
        //                                          Convert.ToDecimal(TotalCachet_textEdit.EditValue)).ToString();
        //            TotalArtista_textEdit.Text = ((Convert.ToDecimal(PorCientoArtista_textEdit.EditValue)) *
        //                                          Convert.ToDecimal(TotalCachet_textEdit.EditValue)).ToString();

        //        }
        //        else
        //        {
        //            AAjustandoPorCientoAgencia = 0;
        //            return;
        //        }
        //    else if (SumaValidadora() == 1)
        //    {
        //        PorCientoArtista_textEdit.Text = "100";
        //        TotalArtista_textEdit.Text = TotalCachet_textEdit.Text;
        //        TotalEmpresa_textEdit.Text = ((Convert.ToDecimal(PorCientoEmpresa_textEdit.EditValue)) *
        //                                      Convert.ToDecimal(TotalCachet_textEdit.EditValue)).ToString();
        //    }
        //    AAjustandoPorCientoAgencia = 0;
        //}

        //private void PorCientoArtista_textEdit_EditValueChanged(object sender, EventArgs e)
        //{

        //    AAjustandoPorCientoArtista = 1;
        //    if (TotalCachet_labelControl.Text != null && SumaValidadora() == 1)
        //    {
        //        PorCientoEmpresa_textEdit.Text = (1 - Convert.ToDecimal(PorCientoEmpresa_textEdit.EditValue)).ToString();
        //        if (TotalCachet_textEdit.EditValue != null)
        //        {
        //            TotalEmpresa_textEdit.Text = ((Convert.ToDecimal(PorCientoEmpresa_textEdit.EditValue)) *
        //                                          Convert.ToDecimal(TotalCachet_textEdit.EditValue)).ToString();
        //            if (PorCientoArtista_textEdit.EditValue != null)
        //                TotalArtista_textEdit.Text = ((Convert.ToDecimal(PorCientoArtista_textEdit.EditValue)) *
        //                                              Convert.ToDecimal(TotalCachet_textEdit.EditValue)).ToString();
        //        }
        //    }
        //    AAjustandoPorCientoArtista = 0;

        //}

        //private void IncluyePagoAgencia_checkEdit_CheckedChanged(object sender, EventArgs e)
        //{
        //    if (!IncluyePagoAgencia_checkEdit.Checked)
        //        PorCientoArtista_textEdit.Text = "100";
        //    TotalArtista_textEdit.Text = TotalCachet_textEdit.Text;
        //}

        //private void TotalEmpresa_textEdit_EditValueChanged(object sender, EventArgs e)
        //{

        //    AAjustandoTotalEmpresa = 1;
        //    if (IncluyePagoAgencia_checkEdit.Checked && SumaValidadora() == 1)
        //    {
        //        if (TotalCachet_textEdit.Text != null)
        //        {
        //            if (TotalEmpresa_textEdit.Text != null)
        //            {
        //                TotalArtista_textEdit.Text = (Convert.ToDecimal(TotalCachet_textEdit.Text) - Convert.ToDecimal(TotalEmpresa_textEdit.Text)).ToString();
        //                PorCientoEmpresa_textEdit.Text =
        //                    (Convert.ToDecimal(TotalEmpresa_textEdit.Text) * 100 - Convert.ToDecimal(TotalCachet_textEdit.Text))
        //                        .ToString();
        //                PorCientoArtista_textEdit.Text = (100 - Convert.ToDecimal(PorCientoEmpresa_textEdit.Text)).ToString();
        //            }
        //        }
        //    }
        //    AAjustandoTotalEmpresa = 0;
        //}

        //private void TotalArtista_textEdit_EditValueChanged(object sender, EventArgs e)
        //{
        //    AAjustandoTotalArtista = 1;
        //    if (IncluyePagoAgencia_checkEdit.Checked && SumaValidadora() == 1)
        //    {
        //        decimal totalCachet = Convert.ToDecimal(TotalCachet_textEdit.Text);
        //        decimal toalArtista = Convert.ToDecimal(TotalArtista_textEdit.Text);
        //        PorCientoArtista_textEdit.Text = (100 * toalArtista / totalCachet).ToString();
        //        PorCientoEmpresa_textEdit.Text = (100 - Convert.ToDecimal(PorCientoArtista_textEdit.Text)).ToString();
        //    }
        //    AAjustandoTotalArtista = 0;
        //}



        //private int SumaValidadora()
        //{
        //    return AAjustandoPorCientoAgencia + AAjustandoPorCientoArtista + AAjustandoTotalArtista +
        //           AAjustandoTotalEmpresa;
        //}

        private void RefrescaCausaDeProyecto_buttonEdit_Click(object sender, EventArgs e)
        {
            if (!GlobalProyecto.GetParticipantes().Any())
                XtraMessageBox.Show(
                    "para ontener un mejor resultado generando este texto considere insertar los integrantes y generar el texto nuevamente", "Consejo", MessageBoxButtons.OK);
            CausaDeProyectoMemoEdit.Text = ConformaCausaDeProyecto(ATipoProyecto);
            ACambiosPendientes = CausaDeProyectoMemoEdit.OldEditValue != CausaDeProyectoMemoEdit.EditValue;
            ManejaIconoTabTextos();
        }

        private void SalvaProyecto_buttonEdit_Click(object sender, ButtonPressedEventArgs e)
        {
            try
            {
                if (!ValidaTabPrincipal()) return;
                ManejaIconosDeTabs();
                bool ok;
                Guid proyectoId = SalvarCabeceraProyecto(out ok);
                if (!ok)
                {
                    MessageBox.Show("Error al salvar Proyecto, por favor verifique no falte algun dato", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                proyectoIDToolStripTextBox.Text = proyectoId.ToString();
                Invitados_gridControl.Enabled = true;
               //// IntegrantegridControl.DataSource =_GlobalDataContext.ParticipantesDeProyectos.Where(c => c.ProyectoId == GetProyectoId());
               // IntegrantegridControl.Refresh();
               // IntegrantegridControl.Enabled = true;
               // Invitados_gridControl.Enabled = true;
               // CartaInvitacion_gridControl.Enabled = true;
               // Invitados_GridControlInitData();
               // Invitados_gridControl.Refresh();
               // _CambiosRealizados = true;
            }
            catch (Exception exception)
            {

                XtraMessageBox.Show("Error", string.Format("Error-la causa es {0}", exception.Message), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

            }
        }

        private bool ValidaTabPrincipal()
        {
            if (EsComercialElProyecto() || EsPromocionalElProyecto() || EsIntercambioCulturalElProyecto() )
            {
                return (Comercial_dxValidationProvider.Validate());
            }
            if (EsTramiteMigratoElProyecto())
            {
                return (TramiteMigratorio_dxValidationProvider.Validate());
            }

            return (Default_dxValidationProvider.Validate());

        }

        private bool EsTramiteMigratoElProyecto()
        {
            return Convert.ToInt32(TipoProyectoLookupEdit.EditValue) == Convert.ToInt32(Enumerados.TipoProyecto.TramiteMigratorio);

        }
        private bool EsPromocionalElProyecto()
        {
            return Convert.ToInt32(TipoProyectoLookupEdit.EditValue) == Convert.ToInt32(Enumerados.TipoProyecto.Promocional);
        }

        private bool EsIntercambioCulturalElProyecto()
        {
            return Convert.ToInt32(TipoProyectoLookupEdit.EditValue) == Convert.ToInt32(Enumerados.TipoProyecto.IntercambioCultural);
        }

        private bool EsComercialElProyecto()
        {
            return Convert.ToInt32(TipoProyectoLookupEdit.EditValue) == Convert.ToInt32(Enumerados.TipoProyecto.Comercial);
        }

        private void SalvarYSalir_buttonEdit_ButtonClick(object sender, ButtonPressedEventArgs e)
        {
            if (!ValidaTabPrincipal()) return;
            if (!ManejaIconosDeTabs()) MuestraMensajeDeAdvertenciaDeErrores();
            bool ok;
            Guid proyectoId = SalvarCabeceraProyecto(out ok);
            if (!ok)
            {
                MessageBox.Show("Error al salvar Proyecto");
                return;
            }
            proyectoIDToolStripTextBox.Text = proyectoId.ToString();
            Invitados_gridControl.Enabled = true;
            IntegrantegridControl.DataSource =
                AGlobalDataContext.ParticipantesDeProyectos.Where(c => c.ProyectoId == GetProyectoId());
            IntegrantegridControl.Refresh();
            IntegrantegridControl.Enabled = true;
            Invitados_gridControl.Enabled = true;
            CartaInvitacion_gridControl.Enabled = true;
            Invitados_GridControlInitData();
            Invitados_gridControl.Refresh();
            DialogResult = DialogResult.OK;
        }

        private void Integrantes_gridView_RowCellStyle(object sender, DevExpress.XtraGrid.Views.Grid.RowCellStyleEventArgs e)
        {
            if (e.Column.FieldName == "TipoTramiteMigratorio")
            {
                //TODO Capturar el valor de la celda para poner en rojo si esta vacía
            }

        }

        private void Integrantes_gridView_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            try
            {
                AGlobalDataContext.SubmitChanges();
            }
            catch (Exception exception)
            {

                MessageBox.Show(exception.Message);
            }
        }



        private decimal? GetTotalCachet()
        {
            var sum = AGlobalDataContext.Presentacion.Where(c => c.ProyectoId == GetProyectoId())
                .Sum(c => c.Cantidad * c.Cachet);
            if (sum != null)
                return
                    decimal.Round((decimal)sum, 2);
            return 0;
        }


        private void Invitados_gridView_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            try
            {
                ParticipantesDeProyectos invitado = (ParticipantesDeProyectos)e.Row;

                invitado.ProyectoId = GetProyectoId();
                AGlobalDataContext.SubmitChanges();
                Integrantes_GridControlInitData();
            }
            catch (Exception exception)
            {

                MessageBox.Show(exception.Message);
            }

        }

        private void DocumentManager_repositoryItemButtonEdit_ButtonClick(object sender, ButtonPressedEventArgs e)
        {
            var row = (ParticipantesDeProyectos)Invitados_gridView.GetFocusedRow();
            if (row == null || row.ParticipanteID == 0)
            {
                MessageBox.Show("Antes debe salvar los datos del invitado");
                return;
            }

            var invitado = (ParticipantesDeProyectos)Invitados_gridView.GetFocusedRow();
            if (invitado != null)
                if (invitado.ParticipanteID == 0)
                {
                    //   Invitado.FijarComoInvitado(AgrupacionIdLookUpEdit.Text);
                    AGlobalDataContext.ParticipantesDeProyectos.InsertOnSubmit(invitado);
                    AGlobalDataContext.SubmitChanges();
                }
            new DocumentosInvitadosXtraForm(invitado.ParticipanteID).Show();
        }



        private void Cancion_gridControl_EmbeddedNavigator_ButtonClick(object sender, NavigatorButtonClickEventArgs e)
        {
            if (e.Button.ButtonType == NavigatorButtonType.Remove)
            {
                int[] filas = Cancion_gridView.GetSelectedRows();
                foreach (var fila in filas)
                {
                    Cancion cancion = (Cancion)Cancion_gridView.GetRow(fila);
                    AGlobalDataContext.Cancion.DeleteOnSubmit(cancion);
                }
                AGlobalDataContext.SubmitChanges();
            }
        }

        private void DeleteCancion_repositoryItemButtonEdit_ButtonClick(object sender, ButtonPressedEventArgs e)
        {
            Cancion cancion = (Cancion)Cancion_gridView.GetFocusedRow();
            Cancion_gridView.DeleteSelectedRows();
            AGlobalDataContext.Cancion.DeleteOnSubmit(cancion);
            AGlobalDataContext.SubmitChanges();
        }



        private void toolTipController1_GetActiveObjectInfo(object sender, DevExpress.Utils.ToolTipControllerGetActiveObjectInfoEventArgs e)
        {
            if (e.SelectedControl != CartaInvitacion_gridControl) return;

            ToolTipControlInfo info = null;
            //Get the view at the current mouse position 
            GridView view = CartaInvitacion_gridControl.GetViewAt(e.ControlMousePosition) as GridView;
            if (view == null) return;
            //Get the view's element information that resides at the current position 
            GridHitInfo hi = view.CalcHitInfo(e.ControlMousePosition);
            //Display a hint for row indicator cells 
            if (hi.HitTest == GridHitTest.RowIndicator)
            {
                //An object that uniquely identifies a row indicator cell 

                //  hi.HitTest.ToString() + hi.RowHandle.ToString();
                Imagenes cartaInvitacion = (Imagenes)CartaInvitacion_gridView.GetRow(hi.RowHandle);
                object o = cartaInvitacion.Imagen;
                string text = "Row " + hi.RowHandle.ToString();
                info = new ToolTipControlInfo(new ToolTipItem().Image = cartaInvitacion.BitmapImagen, "Prueba");
                toolTipController1.ImageList = new List<Image> { new Bitmap(cartaInvitacion.BitmapImagen) };
                toolTipController1.ImageIndex = 0; //   info.ToolTipImage = _CartaInvitacion.BitmapImagen.GetThumbnailImage(50, 70, null, new IntPtr(50));
            }
            //Supply tooltip information if applicable, otherwise preserve default tooltip (if any) 
            if (info != null)
                e.Info = info;

        }



        #region PresentacionTAB
        private void Invitados_gridView_ValidatingEditor(object sender, BaseContainerValidateEditorEventArgs e)
        {
            // var a = Invitados_gridView.FocusedColumn.FieldName;
        }

        private void Presentacion_gridView_ValidatingEditor(object sender, BaseContainerValidateEditorEventArgs e)
        {
            var fieldName = Presentacion_gridView.FocusedColumn.FieldName;
            //switch (_FieldName)
            //{case "Desde":
            //{
            //    Presentacion_gridView.Columns["Hasta"].RealColumnEdit.
            //    }
            //    break;
            // }
            //    case "Hasta":
            //    {
            //        if ((DateTime)e.Value > FechaFinalDateEdit.DateTime)
            //        {
            //            e.Valid = false;
            //            e.ErrorText = "Verifique Fecha";}
            //        break;
            //    }

            //}
        }

        private void Presentacion_gridView_InvalidRowException(object sender, DevExpress.XtraGrid.Views.Base.InvalidRowExceptionEventArgs e)
        {
            e.ExceptionMode = ExceptionMode.NoAction;
        }

        private void Presentacion_gridView_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            GridView gridView = (GridView)sender;
            var presentacion = (Presentacion)e.Row;
            if (presentacion.Lugar == null)
            {
                gridView.SetColumnError(gridView.Columns["Lugar"], "Indique Lugar de la presentación");
                e.Valid = false;
            }
            if (presentacion.Cachet == null)
            {
                gridView.SetColumnError(gridView.Columns["Cachet"], "Debe asignar un valor al cachet");
                e.Valid = false;
            }

            if (presentacion.Escenario == null)
            {
                gridView.SetColumnError(gridView.Columns["Escenario"], "Indique escenario");
                e.Valid = false;
            }
            if (presentacion.Cantidad == 0)
            {
                gridView.SetColumnError(gridView.Columns["Cantidad"], "Indique Cantidad de Presentaciones en dicho escenario");
                e.Valid = false;
            }
            if (presentacion.TipoMonedaId == 0)
            {
                gridView.SetColumnError(gridView.Columns["TipoMonedaId"], "Seleccione Moneda");
                e.Valid = false;
            }
            if (presentacion.Desde == null)
            {
                gridView.SetColumnError(gridView.Columns["Desde"], "Seleccione Fecha de la Presentación ");
                e.Valid = false;
            }

            if (presentacion.Desde < FechaInicialDateEdit.DateTime || presentacion.Desde > FechaFinalDateEdit.DateTime)
            {
                gridView.SetColumnError(gridView.Columns["Desde"], "Fecha fuera de rango del proyecto");
                e.Valid = false;
            }
            if (presentacion.Hasta != null)
            {
                if (presentacion.Hasta < FechaInicialDateEdit.DateTime || presentacion.Hasta > FechaFinalDateEdit.DateTime)
                {
                    gridView.SetColumnError(gridView.Columns["Hasta"], "Fecha fuera de rango del proyecto");
                    e.Valid = false;
                }
                if (presentacion.Hasta < presentacion.Desde)
                {
                    gridView.SetColumnError(gridView.Columns["Hasta"], "La Fecha Inicial no puede ser mayor que la Fecha Final");
                    gridView.SetColumnError(gridView.Columns["Desde"], "La Fecha Inicial no puede ser mayor que la Fecha Final");
                }
            }



        }

        private void Presentacion_gridView_EditFormPrepared(object sender, EditFormPreparedEventArgs e)
        {
            // TextEdit _CantidadControl = (TextEdit)e.BindableControls["Cantidad"];
            DateEdit desdeControl = (DateEdit)e.BindableControls["Desde"];
            DateEdit hastaControl = (DateEdit)e.BindableControls["Hasta"];
            // _DesdeControl.BackColor = Color.Gray;
            desdeControl.Properties.MinValue = FechaInicialDateEdit.DateTime;
            desdeControl.Properties.MaxValue = FechaFinalDateEdit.DateTime;
            hastaControl.Properties.MinValue = FechaInicialDateEdit.DateTime;
            hastaControl.Properties.MaxValue = FechaFinalDateEdit.DateTime;

        }

        private void Presentacion_gridControl_EmbeddedNavigator_ButtonClick(object sender, NavigatorButtonClickEventArgs e)
        {
            if (e.Button.ButtonType == NavigatorButtonType.Remove)
            {
                int[] filas = Presentacion_gridView.GetSelectedRows();
                foreach (var fila in filas)
                {
                    Presentacion presentacion = (Presentacion)Presentacion_gridView.GetRow(fila);
                    AGlobalDataContext.Presentacion.DeleteOnSubmit(presentacion);
                }
                AGlobalDataContext.SubmitChanges();
            }
        }

        private void Presentacion_gridView_RowUpdated_1(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            try
            {

                Presentacion presentacion = (Presentacion)e.Row;
                presentacion.ProyectoId = GetProyectoId();
                //_Presentacion.TipoMonedaId = GlobalProyecto.TipoMoneda
                AGlobalDataContext.SubmitChanges();
                ActualizaGlobalActividad();
                ManejaIconoTabPresentaciones();
                TotalCachet_textEdit.Text = GetTotalCachet().ToString();
            }
            catch (Exception exception)
            {

                MessageBox.Show(exception.Message);
            }
        }
        #endregion

        private void FechaInicialDateEdit_EditValueChanged(object sender, EventArgs e)
        {
            var control = (DateEdit)sender;
            FechaFinalDateEdit.Properties.MinValue = FechaInicialDateEdit.DateTime;
            ACambiosPendientes = control.OldEditValue != control.EditValue;
        }

        private void PasajesPagadosPorTextEdit_EditValueChanged(object sender, EventArgs e)
        {
            var control = (TextEdit)sender;
            ACambiosPendientes = control.OldEditValue != control.EditValue;
        }
        private void EmpresarioAsumeText_memoEdit_EditValueChanged(object sender, EventArgs e)
        {
            var control = (MemoEdit)sender;
            ACambiosPendientes = control.OldEditValue != control.EditValue;
        }

        private void PorCientoEmpresa_textEdit_EditValueChanged_1(object sender, EventArgs e)
        {
            if (PorCientoEmpresa_textEdit.EditValue != null && TotalCachet_textEdit.EditValue != null) TotalEmpresa_textEdit.EditValue = Decimal.Round((Convert.ToDecimal(PorCientoEmpresa_textEdit.EditValue) * Convert.ToDecimal(TotalCachet_textEdit.EditValue)) / 100, 2);
        }

        private void PorCientoArtista_textEdit_EditValueChanged_1(object sender, EventArgs e)
        {
            if (PorCientoArtista_textEdit.EditValue != null && TotalCachet_textEdit.EditValue != null) TotalArtista_textEdit.EditValue = Decimal.Round((Convert.ToDecimal(PorCientoArtista_textEdit.EditValue) * Convert.ToDecimal(TotalCachet_textEdit.EditValue)) / 100, 2);

        }

        private void buttonEdit1_Click(object sender, EventArgs e)
        {

        }

        //private void CartaDeInvitacion_buttonEdit_ButtonClick(object sender, ButtonPressedEventArgs e)
        //{
        //    if (openFileDialog1.ShowDialog() == DialogResult.OK)
        //    {
        //        FileInfo _FileInfo = new FileInfo(openFileDialog1.FileName);
        //        if (_FileInfo.Extension != "pdf") return;
        //        PdfDocument document = PdfReader.Open(_FileInfo.FullName);

        //        int imageCount = 0;
        //        // Iterate pages
        //        foreach (PdfPage page in document.Pages)
        //        {
        //            // Get resources dictionary
        //            PdfDictionary resources = page.Elements.GetDictionary("/Resources");
        //            if (resources != null)
        //            {
        //                // Get external objects dictionary
        //                PdfDictionary xObjects = resources.Elements.GetDictionary("/XObject");
        //                if (xObjects != null)
        //                {
        //                    ICollection<PdfItem> items = xObjects.Elements.Values;
        //                    // Iterate references to external objects
        //                    foreach (PdfItem item in items)
        //                    {
        //                        PdfReference reference = item as PdfReference;
        //                        if (reference != null)
        //                        {
        //                            PdfDictionary xObject = reference.Value as PdfDictionary;
        //                            // Is external object an image?
        //                            if (xObject != null && xObject.Elements.GetString("/Subtype") == "/Image")
        //                            {
        //                                int _ImagenID = Imagenes.Salvar(ExportImage(xObject, ref imageCount), "PDFConvert", imageCount, _GlobalDataContext);
        //                                imageCount++;
        //                                _GlobalDataContext.CartasDeInvitacion.InsertOnSubmit(new CartasDeInvitacion { ImagenId = _ImagenID, ProyectoId = GetProyectoId() });
        //                                _GlobalDataContext.SubmitChanges();
        //                            }
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //        CartaInvitacion_gridControl.DataSource = (new NegocioDataContext()).CartasDeInvitacion.Where(c => c.ProyectoId == GetProyectoId()).Select(c => c.Imagenes);
        //        CartaInvitacion_layoutView.RefreshData();
        //    }
        //    // Create a PrintingSystem component. 
        //    DevExpress.XtraPrinting.PrintingSystem ps = new DevExpress.XtraPrinting.PrintingSystem();

        //    // Create a link that will print a control. 
        //    //    DevExpress.XtraPrinting.PrintableComponentLink link = new PdfDocument();

        //    //// Specify the control to be printed. 
        //    //link.Component = new;

        //    //// Generate a report. 
        //    //link.CreateDocument();

        //    //// Export the report to a PDF file. 
        //    //string filePath = @"c:\gridcontrol.pdf";
        //    //link.PrintingSystem.ExportToImage(filePath);



        //    //if (openFileDialog1.ShowDialog() == DialogResult.OK) {
        //    //    FileInfo _File = new FileInfo(openFileDialog1.FileName);
        //    //    Bitmap firstPage = new Pdf2Image(_File.FullName).GetImage();
        //    //    var b = firstPage;
        //    //    MessageBox.Show(firstPage.GetRealTableName());

        //    //}
        //}
        /// <summary>
        /// Currently extracts only JPEG images.
        /// </summary>
        //static byte[] ExportImage(PdfDictionary image, ref int count)
        //{
        //    byte[] stream = image.Stream.Value;
        //    return stream;
        //    //string filter = image.Elements.GetName("/Filter");

        //    //switch (filter)
        //    //{
        //    //    case "/DCTDecode":
        //    //    return  ExportJpegImage(image, ref count);
        //    //}
        //}

        /// <summary>
        /// Exports a JPEG image.
        /// </summary>
        //static byte[] ExportJpegImage(PdfDictionary image, ref int count)
        //{
        //    // Fortunately JPEG has native support in PDF and exporting an image is just writing the stream to a file.
        //    byte[] stream = image.Stream.Value;
        //    return stream;
        //    //FileStream fs = new FileStream(String.Format("Image{0}.jpeg", count++), FileMode.Create, FileAccess.Write);
        //    //BinaryWriter bw = new BinaryWriter(fs);
        //    //bw.Write(stream);
        //    //bw.Close();
        //}
        private void CartaDeInvitacionlayoutView_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            try
            {
                AGlobalDataContext.SubmitChanges();

                var imagenId = ((Imagenes)e.Row).ImagenID;
                AGlobalDataContext.CartasDeInvitacion.InsertOnSubmit(new CartasDeInvitacion { ImagenId = imagenId, ProyectoId = GetProyectoId() });
                AGlobalDataContext.SubmitChanges();
            }
            catch (Exception exception)
            {

                MessageBox.Show(exception.Message);
            }
        }

        private void CartaDeInvitacionlayoutView_RowDeleted(object sender, DevExpress.Data.RowDeletedEventArgs e)
        {
            AGlobalDataContext.SubmitChanges();
        }

        private void Salvar_simpleButton_Click(object sender, EventArgs e)
        {
            if (!Comercial_dxValidationProvider.Validate()) return;
            bool ok;
            Guid proyectoId = SalvarCabeceraProyecto(out ok);
            if (!ok)
            {
                MessageBox.Show("Error al salvar Proyecto, verifique los datos insertados");
                return;
            }
            proyectoIDToolStripTextBox.Text = proyectoId.ToString();
            CartaDeInvitacion_xtraTabPage.PageEnabled = Invitado_xtraTabPage.PageEnabled = Presentaciones_xtraTabPage.PageEnabled = RepertorioProyecto_xtraTabPage.PageEnabled = true;
            //Invitados_gridControl.Enabled = true;
            //IntegrantegridControl.DataSource = _GlobalDataContext.ParticipantesDeProyectos.Where(c => c.ProyectoId == GetProyectoId());
            //IntegrantegridControl.Refresh();
            //IntegrantegridControl.Enabled = true;
            //Invitados_gridControl.Enabled = true;
            //CartaInvitacion_gridControl.Enabled = true;
            //Invitados_GridControlInitData();
        }

        private void CartaInvitacion_layoutView_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            Imagenes carta = (Imagenes)e.Row;
            if (carta.Descripcion == null) carta.Descripcion = "Carta De Invitacion";
            if (carta.Orden == null) carta.Orden = 1;
        }

        private void FechaConfeccionDateEdit_EditValueChanged(object sender, EventArgs e)
        {
            var valor = ((DateEdit)sender).DateTime;
            FechaInicialDateEdit.Properties.MinValue = FechaFinalDateEdit.Properties.MinValue = FechaConfeccionDateEdit.DateTime;
            controlClientesBindingSource.DataSource =
                AGlobalDataContext.ControlClientes.Where(c => c.Vigencia > valor);
        }

        private void TipoProyectoLookupEdit_Click(object sender, EventArgs e)
        {
            Comercial_dxValidationProvider.RemoveControlError((LookUpEdit)sender);
            ConformaControlesEnumerados();
        }

        private void AgrupacionIdLookUpEdit_Click(object sender, EventArgs e)
        {
            Comercial_dxValidationProvider.RemoveControlError((LookUpEdit)sender);
            PopulaAgrupacion();
        }

        private void PopulaAgrupacion()
        {
            agrupacionBindingSource.DataSource = AGlobalDataContext.Agrupacion.OrderByDescending(c => c.PerteneceACatalogo).ThenBy(c => c.Nombre);
        }

        private void PaisIdLookUpEdit_Click(object sender, EventArgs e)
        {
            Comercial_dxValidationProvider.RemoveControlError((LookUpEdit)sender);
            paisesBindingSource.DataSource = new NegocioDataContext().Paises;
        }



        //private void Empresario_checkedComboBoxEdit_Click(object sender, EventArgs e)
        //{

        //    dxValidationProvider1.RemoveControlError((Empresario_checkedComboBoxEdit));
        //}

        private void ActualizaNombre_simpleButton_Click(object sender, EventArgs e)
        {
            NombreProycto_textEdit.EditValue = string.Format("{0}-{1}-{2}", AgrupacionIdLookUpEdit.Text.Trim(),
                PaisIdLookUpEdit.Text.Trim(), FechaInicialDateEdit.DateTime.Date.ToShortDateString());
        }

        private void SalvarResumen_simpleButton_Click(object sender, EventArgs e)
        {
            try
            {
                bool ok;
                SalvarCabeceraProyecto(out ok);
                if (!ok)
                {
                    MessageBox.Show("Error en el proceso de salvado");
                }
                ManejaIconoTabTextos();

            }
            catch (Exception)
            {

                MessageBox.Show("Error en el proceso de guardado");
            }
        }

        private void GenerarResumen_simpleButton_Click(object sender, EventArgs e)
        {
            try
            {
                if (EsComercialElProyecto() || EsPromocionalElProyecto() || EsIntercambioCulturalElProyecto())
                    if (Comercial_dxValidationProvider.Validate())
                    {
                        Resumen_memoEdit.Text = GlobalProyecto.ObservacionProyecto;
                    }
                    else
                    {
                        XtraMessageBox.Show("Verifique datos de entrada", "Antención", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }

            }
            catch (Exception)
            {

                Resumen_memoEdit.Text = "-ERROR-";
            }
            ManejaIconoTabTextos();
        }


        private void RefrescaCausaHabilitacionDePasaporte_simpleButton_Click(object sender, EventArgs e)
        {
            if (GlobalProyecto.ParticipantesDeProyectos.Any(c => c.TipoTramiteMigratorio != null))
            {
                CausaHabilitacionPasaportes_memoEdit.Enabled = true;
                CausaHabilitacionPasaportes_memoEdit.Text =
                    ConformaCausaDeProyecto(Enumerados.TipoProyecto.TramiteMigratorio);
                ACambiosPendientes = CausaDeProyectoMemoEdit.OldEditValue != CausaDeProyectoMemoEdit.EditValue;
            }
            else
            {
                CausaHabilitacionPasaportes_memoEdit.Enabled = false;
            }
            ManejaIconoTabTextos();
        }

        private void RefrescaCausaDeProyecto_buttonEdit_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void InsertIntegrante_simpleButton_Click(object sender, EventArgs e)
        {
            InsertaNuevosIntegrantes();
            ActualizaGlobalActividad();
            ManejaIconoTabIntegrantes();
        }

        private void Integrantes_gridView_SelectionChanged(object sender, DevExpress.Data.SelectionChangedEventArgs e)
        {
            EliminarInt_simpleButton.Enabled = Integrantes_gridView.GetSelectedRows().Any();
        }



        private void EliminaInvitado_simpleButton_Click(object sender, EventArgs e)
        {
            EliminaIntegrantes(true);
        }

        private void Invitados_gridView_SelectionChanged(object sender, DevExpress.Data.SelectionChangedEventArgs e)
        {
            EliminaInvitado_simpleButton.Enabled = Invitados_gridView.GetSelectedRows().Any();
        }


        private void PopulaTipoTramiteMigratorioLookUpEdit()
        {
            TipoTramiteMig_repositoryItemLookUpEdit.DataSource =
                Enumerados.ListaDeEnumerados(typeof (Enumerados.TipoTramiteMigratorio));//Array descripciones = Enum.GetValues(typeof(Enumerados.TipoTramiteMigratorio));

            //TipoTramiteMig_repositoryItemLookUpEdit.DisplayMember = "Descripcion";
            //TipoTramiteMig_repositoryItemLookUpEdit.ValueMember = "Valor";


            //List<SmallTipoTramite> listaDeEnumeradosClasses = (from object descripcion in descripciones
            //                                                   let descripcion1 = ((Enumerados.TipoTramiteMigratorio)(Enum.Parse(typeof(Enumerados.TipoTramiteMigratorio), descripcion.ToString()))).StringValue()
            //                                                   let valor = Convert.ToInt32(Enum.Parse(typeof(Enumerados.TipoTramiteMigratorio), descripcion.ToString()))
            //                                                   select new SmallTipoTramite
            //                                                   {
            //                                                       Valor = valor,
            //                                                       Descripcion = descripcion1
            //                                                   }).ToList();

            //TipoTramiteMig_repositoryItemLookUpEdit.DataSource = listaDeEnumeradosClasses;
            //TipoTramiteMig_repositoryItemLookUpEdit.DisplayMember = "Descripcion";
            //TipoTramiteMig_repositoryItemLookUpEdit.ValueMember = "Valor";
            //TipoTramiteMig_repositoryItemLookUpEdit.Columns.Add(new LookUpColumnInfo
            //{
            //    Caption = "Descripcion",
            //    FieldName = "Descripcion"
            //});
        }

        private void PartDeProyectos2_gridView_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            AGlobalDataContext.SubmitChanges();
            ActualizaGlobalActividad();
            ManejaIconoTabIntegrantes();

        }

        private void ActualizaGlobalActividad()
        {
            AGlobalDataContext.Refresh(RefreshMode.KeepChanges);
           //_GlobalDataContext = new NegocioDataContext();
            GlobalProyecto = AGlobalDataContext.Proyectos.FirstOrDefault(c => c.ProyectoID == GlobalProyecto.ProyectoID);
        }

        private void EliminarInt_simpleButton_Click(object sender, EventArgs e)
        {
            EliminaIntegrantes();
        }

        private void PartDeProyectos2_gridView_SelectionChanged(object sender, DevExpress.Data.SelectionChangedEventArgs e)
        {
            DelIntegrante_simpleButton.Enabled = ParticipantesDeProyecto_gridView.GetSelectedRows().Any();
        }

        private void DelIntegrante_simpleButton_Click(object sender, EventArgs e)
        {
            EliminaIntegrantes();
            ActualizaGlobalActividad();
            ManejaIconoTabIntegrantes();
        }

        private void ClientesLookUpEdit_Properties_Click(object sender, EventArgs e)
        {


        }

        private void ClientesLookUpEdit_ButtonClick(object sender, ButtonPressedEventArgs e)
        {
            if (e.Button.Kind == ButtonPredefines.Glyph)
            {
                EditClienteXtraForm clienteForm = new EditClienteXtraForm();
                if (clienteForm.ShowDialog() != DialogResult.Cancel)
                {
                    controlClientesBindingSource.DataSource =
                        new NegocioDataContext().ControlClientes.Where(
                            c => c.Vigencia >= FechaConfeccionDateEdit.DateTime).OrderBy(c => c.NumeroContrato);
                    ClientesLookUpEdit.EditValue = clienteForm.GlobalControlClientes.ControlClienteID;

                }
            }
        }

        private void AddPresentacion_simpleButton_Click(object sender, EventArgs e)
        {
            //Presentacion_gridView.AddNewRow();
            //Presentacion_gridView.ShowEditForm();

            //_GlobalDataContext.SubmitChanges();
            //ActualizaGlobalActividad();
            //ManejaIconoTabPresentaciones();
            //TotalCachet_textEdit.Text = GetTotalCachet().ToString();
            PopupEditPresentacionXtraForm aForm = new PopupEditPresentacionXtraForm(GlobalProyecto,AGlobalDataContext);
            aForm.StartPosition = FormStartPosition.CenterParent;
           // aForm.ShowDialog()
            if (aForm.ShowDialog() == DialogResult.OK)
            {
                PopulaPresentaciones();
                ActualizaDistribucionDeProyecto();ManejaIconoTabPresentaciones();
            }
        }

        private void PopulaPresentaciones()
        {
            presentacionBindingSource.DataSource =
                AGlobalDataContext.Presentacion.Where(c => c.ProyectoId == GetProyectoId());
        }
        private void EliminarPresentacion_simpleButton_Click(object sender, EventArgs e)
        {
            Presentacion_gridView.DeleteSelectedRows();

        }

        private void Presentacion_gridView_InitNewRow(object sender, InitNewRowEventArgs e)
        {
           // Presentacion_gridView.SetRowCellValue(e.RowHandle, colProyectoId, GetProyectoId());
        }

        private void Presentacion_gridView_SelectionChanged(object sender, DevExpress.Data.SelectionChangedEventArgs e)
        {
            EliminarPresentacion_simpleButton.Enabled = EditPresentacion_simpleButton.Enabled = Presentacion_gridView.GetSelectedRows().Any();
        }

        private void Presentacion_gridView_RowDeleted(object sender, DevExpress.Data.RowDeletedEventArgs e)
        {
        
            AGlobalDataContext.SubmitChanges();
            ActualizaGlobalActividad();
            ManejaIconoTabPresentaciones();
            ActualizaDistribucionDeProyecto();
        }

        private void ActualizaDistribucionDeProyecto()
        {
            try
            {
                var total = GetTotalCachet();
                TotalCachet_textEdit.Text = GetTotalCachet().ToString();
                TotalArtista_textEdit.EditValue = Convert.ToInt32(PorCientoArtista_textEdit.EditValue)*total/100;
                TotalEmpresa_textEdit.EditValue = Convert.ToInt32(PorCientoEmpresa_textEdit.EditValue)*total/100;

            }
            catch 
            {
                
                //donothing
            }

        }

        private void TotalCachet_textEdit_EditValueChanged(object sender, EventArgs e)
        {
            
        }

        private void Presentacion_gridView_DoubleClick(object sender, EventArgs e)
        {
            Presentacion aPresentacion = GetPresentacionSeleccionadoPorMouse();
            if(aPresentacion!=null)
            EditaPresentacion(aPresentacion);

        }
        private void EditaPresentacion(Presentacion aPresentacion)
        {
            PopupEditPresentacionXtraForm xtraForm = new PopupEditPresentacionXtraForm(aPresentacion,AGlobalDataContext);
            if (xtraForm.ShowDialog() == DialogResult.OK)
            {
                PopulaPresentaciones();
                ActualizaDistribucionDeProyecto();
            }
        }


        private Presentacion GetPresentacionSeleccionadoPorMouse()
        {
            var gridView = Presentacion_gridView;
            Point clickPoint = Presentacion_gridControl.PointToClient(MousePosition);
            var hitInfo = gridView.CalcHitInfo(clickPoint);
            if (hitInfo.InRowCell)
            {
                int rowHandle = hitInfo.RowHandle;
                // GridColumn column = hitInfo.Column;
                Presentacion aPresentacion = (Presentacion)gridView.GetRow(rowHandle);
               // _AgrupacionDeArtistaSeleccionado = aPresentacion;
                return aPresentacion;
            }

            return null;
            //    private void IntegrantesForm_Shown(object sender, EventArgs e)
            //    {
            //        var _MainForm = MdiParent as MainForm;
            //        if (_MainForm != null) _MainForm.splashScreenManager1.CloseWaitForm();}
        }

        private void EditPresentacion_simpleButton_Click(object sender, EventArgs e)
        {
            var aPresentacion = (Presentacion) (Presentacion_gridView.GetRow(Presentacion_gridView.GetSelectedRows()[0]));
            EditaPresentacion(aPresentacion);
           
        }

        private void Salvar_buttonEdit_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void TipoPasaporte_lookUpEdit_EditValueChanged(object sender, EventArgs e)
        {
            CausaPasaporteOf_memoExEdit.Enabled = Convert.ToInt32(TipoPasaporte_lookUpEdit.EditValue) ==
                                              Convert.ToInt32(Enumerados.TipoPasaporte.Oficial);
        }

        private void TipoTramiteMig_repositoryItemLookUpEdit_Click(object sender, EventArgs e)
        {
           
        }

        private int integranteRowHandled = 0;
        private void TipoTramiteMig_repositoryItemLookUpEdit_ButtonClick(object sender, ButtonPressedEventArgs e)
        {
            if (e.Button.IsLeft)
            {
                ParticipantesDeProyecto_gridView.SetRowCellValue(integranteRowHandled, colTipoTramiteMigratorio2, null);
                ParticipantesDeProyectos participanteRow = (ParticipantesDeProyectos)ParticipantesDeProyecto_gridView.GetRow(integranteRowHandled);
                AGlobalDataContext.ParticipantesDeProyectos.FirstOrDefault(c => c.ParticipanteID == participanteRow.ParticipanteID).TipoTramiteMigratorio=null;
                AGlobalDataContext.SubmitChanges();

            }
        }

        public GridColumn GetClickedInformation(GridControl aGridControl, GridView agridView, out int rowHandle)
        {
            var gridView = agridView;
            Point clickPoint = aGridControl.PointToClient(MousePosition);
            var hitInfo = gridView.CalcHitInfo(clickPoint);
            if (hitInfo.InRowCell)
            {
                rowHandle = hitInfo.RowHandle;
                GridColumn column = hitInfo.Column;
                return column;
            }
            rowHandle = 0;
            return null;
        }

        private void Integrantes_gridView_Click(object sender, EventArgs e)
        {
        }

        private void ParticipantesDeProyecto_gridView_Click(object sender, EventArgs e)
        {
            GetClickedInformation(ParticipantesDeProyectos_gridControl, ParticipantesDeProyecto_gridView, out integranteRowHandled);
        }
    }

}