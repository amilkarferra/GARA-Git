using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraCharts.UI;
using DevExpress.XtraEditors;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Grid;
using DXApplication9.Properties;
using DXApplication9.ReportesSistema;

namespace DXApplication9
{

    public partial class RegistroClientesXtraForm : BaseXtraForm
    {
        private NegocioDataContext AGlobalDataContext = (new NegocioDataContext());
        private int AControlClientesId = 0;
        public static bool VisualizandoNacional = true;

        public RegistroClientesXtraForm()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            PopulaRegistros(true);
            PopulaAnnoCheckBox();
            colPaisId.Visible = false;
            EstadoContrato_repositoryItemLookUpEdit.DataSource =
                Enumerados.ListaDeEnumerados(typeof(Enumerados.EstadoContrato));
            paisesBindingSource.DataSource = AGlobalDataContext.Paises;
        }

        private void RegistroClientes_XtraForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            ((MainForm)MdiParent).EnableButton("RegistroClientes_barButtonItem", true);
        }





        private void Registros_gridView_InitNewRow(object sender, DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs e)
        {
            GridView view = sender as GridView;
            view.SetRowCellValue(e.RowHandle, view.Columns["FechaContrato"], DateTime.Today);
            view.SetRowCellValue(e.RowHandle, view.Columns["NumeroContrato"], ControlClientes.GetProximoNumeroContrato(colPaisId.Visible));

            //int _UltContrato = RegistroClientes.GetProximoNumeroContrato(colPaisId.Visible);
            //if (Int32.TryParse(_GlobalDataContext.ControlClientes.OrderByDescending(c=>c.ControlClienteID).FirstOrDefault().NumeroContrato, out _UltContrato)) 
            //{

            //    _View.SetRowCellValue(e.RowHandle, _View.Columns["NumeroContrato"], _UltContrato + 1);
            //} else
            //{
            //    _View.SetRowCellValue(e.RowHandle, _View.Columns["NumeroContrato"], "Inserte Número");

            //}
        }

        private void Registros_gridView_ValidatingEditor(object sender, DevExpress.XtraEditors.Controls.BaseContainerValidateEditorEventArgs e)
        {
            //            var _FieldName = Registros_gridView.FocusedColumn.FieldName;
            //            if (_FieldName != "FechaContrato") return;

            //            switch (_FieldName)
            //            {
            ////case "Desde":
            //                    //{
            //                    //    Presentacion_gridView.Columns["Hasta"].RealColumnEdit.
            //                    //    }
            //                    //    break;
            //            }
            //            //    case "Hasta":
            //            //    {
            //            //        if ((DateTime)e.Value > FechaFinalDateEdit.DateTime)
            //            //        {
            //            //            e.Valid = false;
            //            //            e.ErrorText = "Verifique Fecha";}
            //            //        break;
            //            //    }

            //            //}

        }

        private void Registros_gridView_CellValueChanged(object sender, DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs e)
        {
            if (e.Column.FieldName == "FechaContrato")
            {
                DateTime cellValue = Convert.ToDateTime(e.Value).AddYears(1);
                Registros_gridView.SetRowCellValue(e.RowHandle, Registros_gridView.Columns["Vigencia"], cellValue);
            }

        }

        private void Registros_gridView_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            var controlClientes = (ControlClientes)e.Row;
            if (controlClientes.PaisId == 0)
                controlClientes.PaisId = AGlobalDataContext.Paises.FirstOrDefault(c => c.Codigo == 53).PaisID;
            controlClientes.NumeroContrato = ControlClientes.GetProximoNumeroContrato(colPaisId.Visible);
            AGlobalDataContext.SubmitChanges();
        }

        private void Registros_gridView_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            var cliente = (ControlClientes)e.Row;
            var view = Registros_gridView;
            if (string.IsNullOrEmpty(cliente.NombreDeEntidad))
            {
                view.SetColumnError(view.Columns["NombreDeEntidad"], "Debe Insertar nombre de la entidad");
                e.Valid = false;
            }
            //if (string.IsNullOrEmpty(_Cliente.NumeroContrato))
            //{
            //    _View.SetColumnError(_View.Columns["NumeroContrato"], "Indique el Número del Contrato");
            //    e.Valid = false;

            //}
            if (string.IsNullOrEmpty(cliente.Representante))
            {
                view.SetColumnError(view.Columns["Representante"], "Debe Insertar el nombre del representante");
                e.Valid = false;
            }
            if (string.IsNullOrEmpty(cliente.Dirección))
            {
                view.SetColumnError(view.Columns["Dirección"], "Debe Insertar la Dirección de la empresa");
                e.Valid = false;
            }
            if (cliente.FechaContrato == null)
            {
                view.SetColumnError(view.Columns["FechaContrato"], "Debe Indicar la fecha del contrato");
                e.Valid = false;
            }
            if (cliente.Vigencia == null)
            {
                view.SetColumnError(view.Columns["Vigencia"], "Debe Indicar la vigencia o Fecha que se vence el contrato");
                e.Valid = false;
            }
        }



        private void Registros_gridView_Click(object sender, EventArgs e)
        {

            var gridView = Registros_gridView;
            Point clickPoint = gridControl1.PointToClient(MousePosition);
            var hitInfo = gridView.CalcHitInfo(clickPoint);
            if (hitInfo.InRowCell)
            {
                int rowHandle = hitInfo.RowHandle;
                GridColumn column = hitInfo.Column;
                ControlClientes control = (ControlClientes)Registros_gridView.GetRow(rowHandle);
                AControlClientesId = control.ControlClienteID;
                if (column == Edit_gridColumn)
                {
                    EditClienteXtraForm editClienteXtraForm = new EditClienteXtraForm(control);
                    if (editClienteXtraForm.ShowDialog() != DialogResult.Abort)
                    {
                        //int cubaPaisId = Paises.PaisIdDeCuba;
                        //ControlClientesbindingSource.DataSource = new NegocioDataContext().ControlClientes.Where(c => VisualizandoNacional ? c.PaisId == cubaPaisId : c.PaisId != cubaPaisId);
                        AGlobalDataContext = new NegocioDataContext();
                        PopulaRegistros(Nacional_checkButton.Checked);
                    }
                }

            }
        }

        private void Cueentas_gridView_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            AGlobalDataContext.SubmitChanges();
        }

        private void gridView1_MasterRowExpanded(object sender, CustomMasterRowEventArgs e)
        {
            TipoMoneda_repositoryItemLookUpEdit.DataSource = AGlobalDataContext.TipoMoneda.Where(c => c.OrdenDeTrabajo);
        }

        private void gridView1_InitNewRow(object sender, InitNewRowEventArgs e)
        {
            TipoMoneda_repositoryItemLookUpEdit.DataSource = AGlobalDataContext.TipoMoneda.Where(c => c.OrdenDeTrabajo);

        }

        private void Cueentas_gridView_InitNewRow(object sender, InitNewRowEventArgs e)
        {
            TipoMoneda_repositoryItemLookUpEdit.DataSource = AGlobalDataContext.TipoMoneda.Where(c => c.OrdenDeTrabajo);

        }


        private void Cueentas_gridView_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            var cuenta = (CuentasBancariasDeCliente)e.Row;
            //obtengo una cuenta que tenga la misma moneda si existe tambien devuelvo falso de lo contrario true
            var cuentaDiferenteConIgualMoneda =
                AGlobalDataContext.CuentasBancariasDeCliente.Where(c => c.ControlClienteId == AControlClientesId && c.TipoMonedaId == cuenta.TipoMonedaId && c.CuentaBancariaID != cuenta.CuentaBancariaID);

            e.Valid = !DynamicQueryable.Any(cuentaDiferenteConIgualMoneda);
            if (e.Valid) return;
            e.ErrorText = "No pueden haber dos cuentas para la misma moneda, Desea Corregir el valor ?";
            Cuentas_gridView.SetColumnError(colTipoMonedaId, "No pueden haber dos cuentas para la misma moneda");
            //Si se esta actualizando una cuenta y coincide que ya habia otra cuenta configurada con la misma moneda no lo permito
        }

        private void Registros_gridView_MasterRowExpanding(object sender, MasterRowCanExpandEventArgs e)
        {
            TipoMoneda_repositoryItemLookUpEdit.DataSource = AGlobalDataContext.TipoMoneda.Where(c => c.OrdenDeTrabajo);

        }

        private void Cuentas_gridView_RowDeleted(object sender, DevExpress.Data.RowDeletedEventArgs e)
        {
            AGlobalDataContext.SubmitChanges();
        }

        private void Nacional_barButtonItem_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            PopulaRegistros(true);
            colPaisId.Visible = false;
            VisualizandoNacional = true;

        }

        private void Internacional_barButtonItem_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            PopulaRegistros(false);
            colPaisId.Visible = true; VisualizandoNacional = false;

        }





        private void Registros_gridView_CustomColumnDisplayText(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnDisplayTextEventArgs e)
        {
            //if (e.Column == ContratoString_gridColumn)
            //{
            //    var consecutivoContrato = Convert.ToInt32(Registros_gridView.GetRowCellValue(e.ListSourceRowIndex, colNumeroContrato));
            //    var annoContrato = Convert.ToDateTime(Registros_gridView.GetRowCellValue(e.ListSourceRowIndex, colFechaContrato)).Year;
            //    e.DisplayText = string.Format("{0}/{1}", consecutivoContrato, annoContrato);
            //}
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="aNacional">true si se esta insertando un contrato en frontera</param>
        private void PopulaRegistros(bool aNacional)
        {

            colProyectoAsociado.Visible = !aNacional;//muestra la columna de proyectos asociados solo para los internacionales

            if (aNacional)
            {
                ControlClientesbindingSource.DataSource = AGlobalDataContext.ControlClientes.Where(c => c.Paises.Codigo == 53).OrderBy(c => c.FechaContrato.Year).ThenBy(c => c.NumeroContrato);
                VisualizandoNacional = true;
                TipoContrato_barStaticItem.Caption = "Visualizando Registros Nacionales";
                TipoContrato_barStaticItem.Glyph = imageCollection1.Images[0];
                TipoContrato_barStaticItem.Appearance.BackColor = Color.Green;
                return;
            }
            ControlClientesbindingSource.DataSource = AGlobalDataContext.ControlClientes.Where(c => c.Paises.Codigo != 53 || c.Paises.Codigo == null).OrderBy(c => c.FechaContrato.Year).ThenBy(c => c.NumeroContrato);
            VisualizandoNacional = false;
            TipoContrato_barStaticItem.Caption = "Visualizando Registros Internacionales";
            TipoContrato_barStaticItem.Glyph = imageCollection1.Images[1];
            TipoContrato_barStaticItem.Appearance.BackColor = Color.Blue;
        }

        private void NumeroContrato_repositoryItemTextEdit_Enter(object sender, EventArgs e)
        {
            (sender as TextEdit).ReadOnly = true;
        }

        private void NuevoContrato_simpleButton_Click(object sender, EventArgs e)
        {
            EditClienteXtraForm clienteXtraForm = new EditClienteXtraForm();
            if (clienteXtraForm.ShowDialog() != DialogResult.Cancel)
            {
                PopulaRegistros(Nacional_checkButton.Checked);
            }
        }

        private void Nacional_checkButton_CheckedChanged(object sender, EventArgs e)
        {
            Nacional_checkButton.Text = Nacional_checkButton.Checked ? "Nacional" : "Internacional";
            Nacional_checkButton.Image = Nacional_checkButton.Checked ? Resources.defaultmap_16x16 : Resources.importmap_16x16;
            PopulaRegistros(Nacional_checkButton.Checked);
        }

        private void Annos_checkedComboBoxEdit_EditValueChanged(object sender, EventArgs e)
        {
            FiltraAnno();
        }

        private void FiltraAnno()
        {
            string cadenaDeFiltrado = GetCadenaDeFiltradoPorAnno();
            if (cadenaDeFiltrado == String.Empty) return;
            Registros_gridView.Columns["Anno"].FilterInfo = new ColumnFilterInfo(ColumnFilterType.Value,
                ConfiguracionGeneral.Anno, cadenaDeFiltrado);
        }

        private string GetCadenaDeFiltradoPorAnno()
        {
            string cadenaFiltro = "";
            var items = Annos_checkedComboBoxEdit.Properties.Items.Where(c => c.CheckState == CheckState.Checked);
            if (!items.Any()) return String.Empty; foreach (var item in items)
            {
                cadenaFiltro += string.Format("[Anno] = '{0}' OR", item.Value);
            }
            //Elimino el ultimo OR

            return cadenaFiltro.Right(3);
        }

        private void OTgridView_ColumnFilterChanged(object sender, EventArgs e)
        {
            var filterDeColumn = colAnno.FilterInfo.FilterString;
            if (filterDeColumn == string.Empty)
            {
                Annos_checkedComboBoxEdit.SelectAll();
            }
        }
        private void PopulaAnnoCheckBox()
        {
            var annos = AGlobalDataContext.ControlClientes.DistinctBy(c => c.FechaContrato.Year).Select(c => c.FechaContrato.Year);
            foreach (var anno in annos)
            {
                Annos_checkedComboBoxEdit.Properties.Items.Add(anno,
                    anno == ConfiguracionGeneral.Anno ? CheckState.Checked : CheckState.Unchecked);
            }
            // Annos_checkedComboBoxEdit.Properties.DataSource = annos;
            //Annos_checkedComboBoxEdit.

        }

        private void ActualizarDatos_simpleButton_Click(object sender, EventArgs e)
        {
            ActualizaDatos();
        }

        private void barButtonItem1_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            EditClienteXtraForm clienteXtraForm = new EditClienteXtraForm();
            if (clienteXtraForm.ShowDialog() != DialogResult.Cancel)
            {
                PopulaRegistros(Nacional_checkButton.Checked);
            }
        }

        private void Duplicar_barButtonItem_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                var contrato = GetContratoSelecionado();
                var contratoNuevo = contrato.DuplicarContrato();
                var ventanaEdicion = new EditClienteXtraForm(contratoNuevo);
                if (ventanaEdicion.ShowDialog() != DialogResult.Cancel)
                    ActualizaDatos();

            }
            catch (Exception)
            {
                Utils.MuestraError();
            }
        }

        public ControlClientes GetContratoSelecionado()
        {
            if (Registros_gridView.GetSelectedRows().Any())
            {
                var contrato = (ControlClientes)Registros_gridView.GetRow(Registros_gridView.GetSelectedRows()[0]);
                return contrato;
            }
            return null;
        }

        public void ActualizaDatos()
        {
            AGlobalDataContext = new NegocioDataContext();
            PopulaRegistros(Nacional_checkButton.Checked);
        }

        private void NacionalPopup_barButtonItem_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            PopulaRegistros(true);
        }

        private void InternacionalPopup_barButtonItem_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            PopulaRegistros(false);
        }

        private void gridView1_DoubleClick(object sender, EventArgs e)
        {
           
        }

        private void Registros_gridView_DoubleClick(object sender, EventArgs e)
        {
            int rowHandle;
            var column = GetClickedInformation(gridControl1, Registros_gridView, out rowHandle);
            ControlClientes cliente = (ControlClientes)Registros_gridView.GetRow(rowHandle);
            EditClienteXtraForm editClienteXtraForm = new EditClienteXtraForm(cliente);
            //splashScreenManager1.ShowWaitForm();
            if (editClienteXtraForm.ShowDialog() == DialogResult.Cancel) return;
            //_GlobalDataContext.Refresh(RefreshMode.OverwriteCurrentValues,_Ot);
            ActualizaDatos();

        }
    }
}
