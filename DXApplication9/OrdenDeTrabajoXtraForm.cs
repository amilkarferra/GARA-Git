using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using DevExpress.CodeParser;
using DevExpress.Utils;
using DevExpress.XtraBars;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraGrid.Views.Grid.ViewInfo;
using DevExpress.XtraReports.UI;
using DevExpress.XtraSplashScreen;
using DXApplication9.ReportesSistema;
//using Get = DevExpress.CodeRush.StructuralParser.Get;

namespace DXApplication9
{
    public partial class OrdenDeTrabajoXtraForm : BaseXtraForm
    {
        private NegocioDataContext AGlobalDataContext = new NegocioDataContext();
        public Enumerados.TipoActividad TipoActividad;
        private int[] ASelectedRows;
        private bool AShowOnlySelected = false;

        public OrdenDeTrabajoXtraForm(Enumerados.TipoActividad tipoActividad)
        {
            try
            {
                SplashScreenManager.ShowForm(MdiParent, typeof(WaitForm1), true, true);
            }
            catch (Exception)
            {

                SplashScreenManager.CloseForm();
                SplashScreenManager.ShowForm(MdiParent, typeof(WaitForm1), true, true);

            }

            TipoActividad = tipoActividad;
            InitializeComponent();
            FechaCierre_gridColumn.Visible = false;
            EstadosOT_repositoryItemLookUpEdit.DataSource = Enumerados.ListaDeEnumerados(typeof(Enumerados.EstadoOrdenDeTrabajo));
            //Enumerados.ProyectoEnumerados.EstadoOrdenDeTrabajo.
            //  EnumToList();// This line of code is generated by Data Source Configuration Wizard
            Moneda_repositoryItemLookUpEdit.DataSource = AGlobalDataContext.TipoMoneda.Where(c => c.OrdenDeTrabajo);
            Empresa_repositoryItemSearchLookUpEdit.DataSource = AGlobalDataContext.ControlClientes.Select(c => new { c.NumeroContrato, c.NombreDeEntidad, c.Representante, c.ControlClienteID });
            Agrupacion_repositoryItemLookUpEdit.DataSource = AGlobalDataContext.Agrupacion;
            usuarioBindingSource.DataSource = AGlobalDataContext.Usuario;
            PopulaAnnoCheckBox();
            Text = tipoActividad.StringValue();
            PopulaOrdenDeTrabajoGridControl();
            AcomodaSegunRol();
            Log_TipoAction_repositoryItemLookUpEdit.DataSource =
    Enumerados.ListaDeEnumerados(typeof(Enumerados.TipoAccion));
            Log_TipoAction_repositoryItemLookUpEdit.DisplayMember = "Tipo";
            Log_TipoAction_repositoryItemLookUpEdit.ValueMember = "Valor";

            //switch (tipoActividad)
            //{

            //    case Enumerados.TipoActividad.OrdenDeTrabajo:
            //        //Insert_simpleButton.Text = "Nueva OT";
            //        //Sel_simpleButton.Text = "Seleccionar OT";
            //        Text = "Ordenes de Trabajo";
            //        break;
            //    case Enumerados.TipoActividad.Factura:
            //        //Insert_simpleButton.Text = "Nueva Factura";
            //        //Sel_simpleButton.Text = "Seleccionar Factura";
            //        Text = "Facturas de Exportación en Frontera";
            //        break;
            //    case Enumerados.TipoActividad.ProduccionInterna:
            //        Text = Enumerados.TipoActividad.ProduccionInterna.StringValue();

            //        break;
            //    default:
            //        throw new ArgumentOutOfRangeException("tipoActividad", tipoActividad, null);
            //}


        }

        private void AcomodaSegunRol()
        {
            var permisoDeEdicion = LoginHelper.UsuarioRegistrado.PuedeEditarOrdenDeTrabajo;
            if (!LoginHelper.UsuarioRegistrado.PuedeEditarOrdenDeTrabajo)
            {
                //quito permisos de edicion 
                Economia_ribbonPage.Visible = true;
                PrincipalRibbonPage.Visible = false;
                OTgridView.DoubleClick -= (OTgridView_DoubleClick);
                OTgridView.Click -= (OTgridView_Click);
            }
            else
            {
                Economia_ribbonPage.Visible = false;
                PrincipalRibbonPage.Visible = true;
            }
            Cancelar_barButtonItem.Enabled = Nueva_barButtonItem.Enabled =
                Descancelar_barButtonItem.Enabled = permisoDeEdicion;
            colCheque.Visible =
                colChequePaga.Visible =
                    colFechaDePago.Visible =
                        colFechaEntregaCheque.Visible = colEstadoCuenta.Visible =
                            LoginHelper.RoleDeUsuario == Enumerados.Roles.Economico;
            colFechaConfeccion.Visible = LoginHelper.RoleDeUsuario != Enumerados.Roles.Economico;

        }

        private void MuestraPagos(bool aMostrarPagos)
        {
            colCheque.Visible =
                colChequePaga.Visible =
                    colFechaDePago.Visible =
                        colFechaEntregaCheque.Visible = colIngresoAgencia.Visible = colEstadoCuenta.Visible = colPorcientoCliente.Visible = colNetoACobrar.Visible = aMostrarPagos;
        }
        private void PopulaAnnoCheckBox()
        {
            var annos = AGlobalDataContext.OrdenDeTrabajo.DistinctBy(c => c.Anno).Select(c => c.Anno);
            foreach (var anno in annos)
            {
                Annos_checkedComboBoxEdit.Properties.Items.Add(anno,
                    anno == ConfiguracionGeneral.Anno ? CheckState.Checked : CheckState.Unchecked);
            }
            // Annos_checkedComboBoxEdit.Properties.DataSource = annos;
            //Annos_checkedComboBoxEdit.

        }

        private void OrdenDeTrabajoXtraForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            ((MainForm)MdiParent).EnableButton("OT_barButtonItem", true);
        }

        private void OrdenDeTrabajoXtraForm_Load(object sender, EventArgs e)
        {
            try
            {
                SplashScreenManager.CloseForm();
            }
            catch
            {

                //donothing

            }


            // TODO: This line of code loads data into the 'artistasDataSet.ControlClientes' table. You can move, or remove it, as needed.
            controlClientesBindingSource.DataSource = new NegocioDataContext().ControlClientes;

        }

        //private void OTgridView_InitNewRow(object sender, DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs e)
        //{
        //    GridView _View = OTgridView;
        //    var _NumeroQueToca = OrdenDeTrabajo.GetProximoNumeroDeActividad(TipoActividad);
        //    _View.SetRowCellValue(e.RowHandle, _View.Columns["NumeroDeOrden"], _NumeroQueToca);
        //    _View.SetRowCellValue(e.RowHandle, _View.Columns["FechaFinalActividad"], DateTime.Today);
        //    _View.SetRowCellValue(e.RowHandle, _View.Columns["FechaIncialActividad"], DateTime.Today);
        //    _View.SetRowCellValue(e.RowHandle, _View.Columns["FechaConfeccion"], DateTime.Today);
        //    _View.SetRowCellValue(e.RowHandle, _View.Columns["CantidadActividades"], 1);
        //    _View.SetRowCellValue(e.RowHandle, _View.Columns["Estado"], 1);

        //}

        private void Empresa_repositoryItemSearchLookUpEdit_Popup(object sender, EventArgs e)
        {
            var control = (SearchLookUpEdit)sender;
            control.Properties.View.Columns["ControlClienteID"].Visible = false;

        }

        //private void OTgridView_CellValueChanged(object sender, DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs e)
        //{
        //    GridView _View = OTgridView;
        //    if (e.Column == colMoneda || e.Column == colClienteQueContrataId || e.Column == colAgrupacionId)
        //    {
        //        var _MonedaId = Convert.ToInt32(_View.GetRowCellValue(e.RowHandle, _View.Columns["TipoMonedaId"]));
        //        var _EmpresaId = Convert.ToInt32(_View.GetRowCellValue(e.RowHandle, _View.Columns["ClienteQueContrataId"]));
        //        var _AgrupacionId = Convert.ToInt32(_View.GetRowCellValue(e.RowHandle, _View.Columns["AgrupacionId"]));
        //        if (_MonedaId == 0 || _EmpresaId == 0 || _AgrupacionId == 0) return;
        //        var _NumeroContratoEnTurno = OrdenDeTrabajo.GetNumeroDeContratoEnTurno(_AgrupacionId, _MonedaId, _EmpresaId);
        //        _View.SetRowCellValue(e.RowHandle, _View.Columns["NumeroContrato"], _NumeroContratoEnTurno);
        //    }

        //    if (e.Column == colFechaConfeccion)
        //    {
        //        var _FechaConfeccion = e.Column.View.GetRowCellValue(e.RowHandle, _View.Columns["FechaConfeccion"]);
        //        _View.SetRowCellValue(e.RowHandle, _View.Columns["FechaFinalActividad"], _FechaConfeccion);
        //        _View.SetRowCellValue(e.RowHandle, _View.Columns["FechaIncialActividad"], _FechaConfeccion);
        //    }
        //    if (e.Column == colFechaIncialActividad)
        //    {
        //        var _FechaFinal = e.Column.View.GetRowCellValue(e.RowHandle, _View.Columns["FechaIncialActividad"]);
        //        _View.SetRowCellValue(e.RowHandle, _View.Columns["FechaFinalActividad"], _FechaFinal);
        //    }
        //}

        //private void OTgridView_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        //{

        //    var _Ot = (OrdenDeTrabajo)e.Row;
        //    if (!_Ot.Existe()) OrdenDeTrabajo.Insert((OrdenDeTrabajo)e.Row);
        //    _GlobalDataContext.SubmitChanges();
        //}

        private void Print_repositoryItemButtonEdit_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            OrdenDeTrabajo ot = (OrdenDeTrabajo)OTgridView.GetRow(OTgridView.GetSelectedRows()[0]);
            ot.MuestraReporte();
        }

        private void OTgridView_Click(object sender, EventArgs e)
        {
            var rowHandle = 0;
            var column = GetClickedInformation(OTgridControl, OTgridView, out rowHandle);
            if (column != null)
            {

                //var gridView = OTgridView;
                //Point clickPoint = OTgridControl.PointToClient(MousePosition);
                //var hitInfo = gridView.CalcHitInfo(clickPoint);
                //if (hitInfo.InRowCell)
                //{
                //    int rowHandle = hitInfo.RowHandle;
                //    GridColumn column = hitInfo.Column;
                //MessageBox.Show(column.Name + " "+rowHandle);
                if (column.Name == "Print_gridColumn")
                {
                    //MuestraSplashScreen();
                    // if (splashScreenManager1.IsSplashFormVisible) splashScreenManager1.CloseWaitForm();
                    // splashScreenManager1.ShowWaitForm();
                    //// splashScreenManager1.
                    OrdenDeTrabajo ot = (OrdenDeTrabajo)OTgridView.GetRow(rowHandle);
                    ot.MuestraReporte();
                    //CierraSplashScreen();
                }
                if (column == Edit_gridColumn)
                {

                    EditaActividadSeleccionada();
                }
                if (column == CierraOT_gridColumn)
                {
                    //if (splashScreenManager1.IsSplashFormVisible) splashScreenManager1.CloseWaitForm();
                    //splashScreenManager1.ShowWaitForm();
                    OrdenDeTrabajo ot = (OrdenDeTrabajo)OTgridView.GetRow(rowHandle);
                    if (ot.TieneNominaAsociada)
                    {
                        MessageBox.Show("La Orden de Trabajo ya tiene asociada una Nomina, si cambia estos datos puede que no coincidan con la nomina de esta actividad");

                    }

                    CierraOtXtraForm editOtXtraForm = new CierraOtXtraForm(ot);
                    editOtXtraForm.ShowDialog();
                    PopulaOrdenDeTrabajoGridControl();
                }
                if (column == Solicitud_gridColumn)
                {
                    ////if (splashScreenManager1.IsSplashFormVisible) splashScreenManager1.CloseWaitForm();
                    ////splashScreenManager1.ShowWaitForm();
                    //OrdenDeTrabajo _Ot = (OrdenDeTrabajo)OTgridView.GetRow(rowHandle);
                    //if (_Ot.ValidaPorNominaAsociada()) return;
                    //SolicitudDePagoXtraReport _report = new SolicitudDePagoXtraReport(_Ot);
                    //_report.CreateDocument();
                    //_report.ShowPreviewDialog();
                }
            }
        }

        private void EditaActividadSeleccionada()
        {
            int rowHandle;
            var column = GetClickedInformation(OTgridControl, OTgridView, out rowHandle);
            OrdenDeTrabajo ot = (OrdenDeTrabajo)OTgridView.GetRow(rowHandle);
            if (!LoginHelper.EliminaValidacion)
                if (!ot.ValidaPorNominaAsociada()) return;
            EditOtXtraForm editOtXtraForm = new EditOtXtraForm(ot.OrdenDeTrabajoID);
            //splashScreenManager1.ShowWaitForm();
            if (editOtXtraForm.ShowDialog() == DialogResult.Cancel) return;
            //_GlobalDataContext.Refresh(RefreshMode.OverwriteCurrentValues,_Ot);
            PopulaOrdenDeTrabajoGridControl();
            if (editOtXtraForm.GlobalActividad != null)
                SeleccionaActividad(editOtXtraForm.GlobalActividad);
        }

        private void SeleccionaActividad(OrdenDeTrabajo anActividad)
        {
            //TODO Implementar metodo que posicione el mouse en una orden determinada
            //OTgridView.Fin
        }

        private void OTgridView_RowDeleted(object sender, DevExpress.Data.RowDeletedEventArgs e)
        {
            AGlobalDataContext.SubmitChanges();
        }
        /// <summary>
        /// Evita que se elimine cualquier orden de trabajo que no sea la ultima
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void OTgridView_RowDeleting(object sender, DevExpress.Data.RowDeletingEventArgs e)
        {
            OrdenDeTrabajo ordenDeTrabajo = ((OrdenDeTrabajo)e.Row);
            if (!ordenDeTrabajo.EsUltima)
                MessageBox.Show("Solamente puede ser eliminada la última Orden de Trabajo insertada", "Denegado", MessageBoxButtons.OK, MessageBoxIcon.Hand); e.Cancel = true;
        }

        private void OTgridView_EditFormShowing(object sender, EditFormShowingEventArgs e)
        {
            //OrdenDeTrabajo _Ot = (OrdenDeTrabajo)OTgridView.GetRow(e.RowHandle);
            //if (_Ot == null) return; 
            //colNumeroDeOrden.OptionsColumn.AllowEdit = _Ot.OrdenDeTrabajoID == 0;
        }

        private void OTgridView_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            NegocioDataContext dataContext = new NegocioDataContext();
            var configuracion = DynamicQueryable.FirstOrDefault(dataContext.ConfiguracionGeneral);
            GridView gridView = (GridView)sender;
            var ot = (OrdenDeTrabajo)e.Row;
            if (ot.LugarDePresentacion == null)
            {
                if (MessageBox.Show("Usted no ha específicado el lugar de la presentación, desea mantener así su orden de Trabajo ?", "Atención", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                {
                    gridView.SetColumnError(gridView.Columns["LugarDePresentacion"], "Indique Lugar de Presentación");
                    e.Valid = false;
                }
            }
            if (ot.AgrupacionId == 0)
            {
                gridView.SetColumnError(gridView.Columns["AgrupacionId"], "Seleccione agrupación");
            }
            if (ot.TipoMonedaId == 0)
            {
                gridView.SetColumnError(colMoneda, "Seleccione Moneda");
            }
            if (ot.ClienteQueContrataId == 0)
            {
                gridView.SetColumnError(gridView.Columns["ClienteQueContrataId"], "Debe seleccionar la empresa que contrata la presentación");
            }
            if (ot.ImportePorActividad == 0)
            {
                gridView.SetColumnError(gridView.Columns["ImportePorActividad"], "El importe no puede ser 0");
            }
            //validando que fecha de confeccion este en el año que se trabaje
            if (ot.FechaConfeccion < Convert.ToDateTime(string.Format("{0}/{1}/{2}", "1", "1", configuracion.AnnoDeTrabajo)))
            {
                gridView.SetColumnError(gridView.Columns["FechaConfeccion"], string.Format("{0} {1} {2}", "Fecha incorrecta, se está trabajando el año ", configuracion.AnnoDeTrabajo, "de no ser así, cambie el mismo en la configuración del sistema, que se encuentra en el menú de configuración general"));
            }
            if (ot.FechaConfeccion > Convert.ToDateTime(string.Format("{0}/{1}/{2}", "1", "1", configuracion.AnnoDeTrabajo)) && ot.FechaIncialActividad < ot.FechaConfeccion)
            {
                gridView.SetColumnError(gridView.Columns["FechaIncialActividad"], "Fecha incorrecta, es año de trabajo es el " + configuracion.AnnoDeTrabajo);

            }
            if (ot.FechaIncialActividad < ot.FechaConfeccion)
            {
                gridView.SetColumnError(gridView.Columns["FechaIncialActividad"], "la fecha inicial de la presentación no puede ser menor que la fecha de  confeccion");
            }
            if (ot.FechaIncialActividad > ot.FechaFinalActividad)
            {
                gridView.SetColumnError(gridView.Columns["FechaIncialActividad"], "la fecha inicial de la presentación no puede ser mayor que la fecha final");

            }

            if (ot.NumeroContrato == null)
            {
                if (ot.AgrupacionId == 0 || ot.ClienteQueContrataId == 0 || ot.TipoMonedaId == 0 || MessageBox.Show("Usted no ha específicado número de contrato, desea mantener así su orden de Trabajo ?", "Atención", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                {
                    gridView.SetColumnError(gridView.Columns["NumeroContrato"], "Indique número de contrato");
                    e.Valid = false;
                }
            }
            //validando que no se haya usado el numero de contrato
            if (dataContext.OrdenDeTrabajo.Any(c => c.NumeroContrato == ot.NumeroContrato))
            {
                var firstOrDefault = dataContext.OrdenDeTrabajo.FirstOrDefault(c => c.NumeroContrato == ot.NumeroContrato);
                if (!(firstOrDefault != null && firstOrDefault.OrdenDeTrabajoID == ot.OrdenDeTrabajoID))
                {
                    if ((ot.AgrupacionId == 0 || ot.ClienteQueContrataId == 0 || ot.TipoMonedaId == 0 || MessageBox.Show(string.Format("{0} {1} {2} {3} {4} {5} {6} ", "El número de contrato", ot.NumeroDeOrden, "Ya ha sido asignado a la orden de trabajo", firstOrDefault.NumeroDeOrden, "en su lugar se propone el contrato", OrdenDeTrabajo.GetNumeroDeContratoEnTurno(ot.AgrupacionId, ot.TipoMonedaId, ot.ClienteQueContrataId), "Está de acuerdo?"), "Atención", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes))
                    {
                        gridView.SetRowCellValue(e.RowHandle, gridView.Columns["NumeroContrato"], OrdenDeTrabajo.GetProximoNumeroDeActividad(TipoActividad));
                    }
                    else
                    {
                        gridView.SetColumnError(gridView.Columns["NumeroContrato"], string.Format("{0} {1} {2}", "La orden", ot.NumeroDeOrden, "ya existe, por favor verifique número"));
                        e.Valid = false;
                    }
                }

            }

            if (ot.NumeroDeOrden == null)
            {
                gridView.SetColumnError(gridView.Columns["NumeroDeOrden"], "La orden de trabajo debe tener asignado un número consecutivo");
                e.Valid = false;
            }

            //validando numero de orden de trabajo
            //ver si cambio el numero de Orden
            bool cambioElNumeroDeOrden = OrdenDeTrabajo.GetNumeroDeOrden(ot.OrdenDeTrabajoID) != ot.NumeroDeOrden;
            if (cambioElNumeroDeOrden)
                //ahora tengo que ver si el numero esta tomado
                if (OrdenDeTrabajo.ExisteNumeroDeOrden(ot.NumeroDeOrden))
                {
                    gridView.SetColumnError(gridView.Columns["NumeroDeOrden"], string.Format("Número asignado, se recomienda {0}", OrdenDeTrabajo.GetProximoNumeroDeActividad(TipoActividad)));
                    e.Valid = false;
                }


        }
        private void OTgridView_InvalidRowException(object sender, DevExpress.XtraGrid.Views.Base.InvalidRowExceptionEventArgs e)
        {
            //Suppress displaying the error message box 
            e.ExceptionMode = ExceptionMode.NoAction;
        }

        private void Insert_simpleButton_Click(object sender, EventArgs e)
        {
            EditOtXtraForm editOt = new EditOtXtraForm(TipoActividad);
            editOt.ShowDialog();
            //try
            //{
            //    _GlobalDataContext.Refresh(RefreshMode.OverwriteCurrentValues, _EditOt.GlobalActividad);
            //}
            //catch (Exception)
            //{

            //   _GlobalDataContext.Refresh(RefreshMode.OverwriteCurrentValues);
            //}

            PopulaOrdenDeTrabajoGridControl();
        }

        private void PopulaOrdenDeTrabajoGridControl()
        {
            AGlobalDataContext = new NegocioDataContext();
            controlClientesBindingSource.DataSource = AGlobalDataContext.ControlClientes;
            bindingSource1.DataSource = AGlobalDataContext.OrdenDeTrabajo.Where(c => c.TipoActividad == (int)TipoActividad).OrderByDescending(c => c.Anno).ThenByDescending(c => c.Consecutivo);
            // OTgridControl.RefreshDataSource();

            FiltraAnno();

        }

        private void OTgridView_RowStyle(object sender, RowStyleEventArgs e)
        {
            try
            {
                if (e.RowHandle == -1) return; OrdenDeTrabajo ot = (OrdenDeTrabajo)OTgridView.GetRow(e.RowHandle);
                Enumerados.EstadoOrdenDeTrabajo estado = (Enumerados.EstadoOrdenDeTrabajo)Enum.Parse(typeof(Enumerados.EstadoOrdenDeTrabajo), ot.Estado.ToString());
                switch (estado)
                {
                    case Enumerados.EstadoOrdenDeTrabajo.Realizada:
                        break;
                    case Enumerados.EstadoOrdenDeTrabajo.Cerrada:
                        e.Appearance.BackColor = Color.Khaki;
                        break;
                    case Enumerados.EstadoOrdenDeTrabajo.Cancelada:
                        e.Appearance.BackColor = Color.LightSalmon;
                        e.Appearance.ForeColor = Color.Brown;
                        break;
                    case Enumerados.EstadoOrdenDeTrabajo.AsociadaNomina:
                        e.Appearance.BackColor = Color.LightSlateGray;
                        if (ot.FechaSolicitudDePago != null)
                            e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Underline);
                        break;
                    case Enumerados.EstadoOrdenDeTrabajo.Cobrada:
                        e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                        break;
                    case Enumerados.EstadoOrdenDeTrabajo.Pagada:
                        e.Appearance.BackColor = Color.Green;
                        break;
                    case Enumerados.EstadoOrdenDeTrabajo.PagadaCobrada:
                        e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                        e.Appearance.BackColor = Color.Green;
                        break;
                    case Enumerados.EstadoOrdenDeTrabajo.AsociadaNominaCobrada:
                        e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                        e.Appearance.BackColor = Color.LightSlateGray;
                        break;
                    case Enumerados.EstadoOrdenDeTrabajo.CerradaCobrada:
                        e.Appearance.BackColor = Color.Khaki;
                        e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Bold);
                        break;
                }
                if (ot.EsFacturaDeProyecto)
                {
                    //e.Appearance.ForeColor = Color.DarkBlue;
                    e.Appearance.Font = new Font(e.Appearance.Font, FontStyle.Italic);
                }
            }
            catch (Exception)
            {

               //do nothing
            }
        }
        private void Refresh_simpleButton_Click(object sender, EventArgs e)
        {
            AGlobalDataContext = new NegocioDataContext();
            //var Ordenes = _GlobalDataContext.OrdenDeTrabajo;
            // _GlobalDataContext.Refresh(RefreshMode.OverwriteCurrentValues, Ordenes);
            PopulaOrdenDeTrabajoGridControl();
        }

        private void Sel_simpleButton_Click(object sender, EventArgs e)
        {

            OTgridView.OptionsSelection.MultiSelect = !OTgridView.OptionsSelection.MultiSelect;
            FechaCierre_gridColumn.Visible = OTgridView.OptionsSelection.MultiSelect;
        }

        private void ConfirmaEntrega_barButtonItem1_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

            EntregaOtEconomiaXtraReport entregaOtEconomia = new EntregaOtEconomiaXtraReport(GetOrdenesIdSeleccionadas());
            entregaOtEconomia.ShowRibbonPreviewDialog();
        }

        private void DatosCierreOT_barButtonItem_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

            CierreOtXtraReport entregaOtEconomia = new CierreOtXtraReport(GetOrdenesIdSeleccionadas());
            entregaOtEconomia.ShowPreview();
        }

        private Guid[] GetOrdenesIdSeleccionadas()
        {
            int[] handles = OTgridView.GetSelectedRows();
            Guid[] ordenesId = new Guid[OTgridView.GetSelectedRows().Count()];
            var a = 0;
            foreach (var rowHandle in handles)
            {
                OrdenDeTrabajo ot = (OrdenDeTrabajo)OTgridView.GetRow(rowHandle);
                ordenesId[a] = ot.OrdenDeTrabajoID;
                a++;
            }
            return ordenesId;
        }

        private void CancelOT_barButtonItem_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {


            var idSeleccionados = GetOrdenesIdSeleccionadas();
            if (MessageBox.Show(string.Format("{0}{1}", "Esta seguro que desea cancelar ", idSeleccionados.Count() > 1 ? "Las Ordenes Seleccionadas" : "La Orden Seleccionada"), "Seguro?", MessageBoxButtons.YesNo, MessageBoxIcon.Information) != DialogResult.Yes)
                return;
            for (int i = 0; i < idSeleccionados.Count(); i++)
            {
                OrdenDeTrabajo.CancelaOrdenDeTrabajo(idSeleccionados[i]);

            }
            PopulaOrdenDeTrabajoGridControl();
        }

        private void Descancelar_barButtonItem_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            var idSeleccionados = GetOrdenesIdSeleccionadas();
            for (int i = 0; i < idSeleccionados.Count(); i++)
            {
                OrdenDeTrabajo.QuitarEstadoCancelado(idSeleccionados[i]);

            }
            PopulaOrdenDeTrabajoGridControl();
        }

        private void OTgridView_DoubleClick(object sender, EventArgs e)
        {
            EditaActividadSeleccionada();

        }
        /// <summary>
        /// Devuelve la columna y el rowhabdle de el grid clickeado 
        /// Devuvle nulo si no se clickea dentro
        /// </summary>
        /// <param name="agridView"></param>
        /// <param name="rowHandle"></param>
        /// <returns></returns>

        private void ImprimirActividades_barButtonItem_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            var idSeleccionados = GetOrdenesIdSeleccionadas();
            XtraReport report = new XtraReport();
            report.CreateDocument();
            foreach (var id in idSeleccionados)
            {
                var actividad = AGlobalDataContext.OrdenDeTrabajo.FirstOrDefault(c => c.OrdenDeTrabajoID == id);

                if (actividad.TipoActividad == (int)Enumerados.TipoActividad.OrdenDeTrabajo)
                {
                    OrdenDeTrabajoXtraReport reporteDeTrabajoXtraReport = new OrdenDeTrabajoXtraReport(actividad);
                    reporteDeTrabajoXtraReport.CreateDocument();
                    reporteDeTrabajoXtraReport.PrintingSystem.PrintingDocument.AutoFitToPagesWidth = 1;
                    report.Pages.AddRange(reporteDeTrabajoXtraReport.Pages);
                    M2XtraReport m2XtraReport = new M2XtraReport(actividad);
                    m2XtraReport.CreateDocument();
                    m2XtraReport.PrintingSystem.PrintingDocument.AutoFitToPagesWidth = 1;
                    report.Pages.AddRange(m2XtraReport.Pages);
                }
                else if (actividad.TipoActividad == (int)Enumerados.TipoActividad.ProduccionInterna)
                {
                    ProduccionInternaXtraReport reporteDeTrabajoXtraReport = new ProduccionInternaXtraReport(actividad);
                    reporteDeTrabajoXtraReport.CreateDocument();
                    reporteDeTrabajoXtraReport.PrintingSystem.PrintingDocument.AutoFitToPagesWidth = 1;
                    report.Pages.AddRange(reporteDeTrabajoXtraReport.Pages);
                    M2XtraReport m2XtraReport = new M2XtraReport(actividad);
                    m2XtraReport.CreateDocument();
                    m2XtraReport.PrintingSystem.PrintingDocument.AutoFitToPagesWidth = 1;
                    report.Pages.AddRange(m2XtraReport.Pages);
                }
                else //caso de facturas
                {
                    FactExportXtraReport facturaReport = new FactExportXtraReport(actividad);
                    facturaReport.CreateDocument();
                    facturaReport.PrintingSystem.PrintingDocument.AutoFitToPagesWidth = 1;
                    report.Pages.AddRange(facturaReport.Pages);
                }

            }

            report.ShowPreview();
        }

        private void OTgridView_CalcPreviewText(object sender, CalcPreviewTextEventArgs e)
        {
            OrdenDeTrabajo ot = (OrdenDeTrabajo)e.Row;
            // Nomina nominaAsociada = ot.GetNominaAsociada();

            //  OTgridView.SetRowCellValue(e.RowHandle, colconsecutivo, ot.ConsecutivoString);
            // gridView1.SetRowCellValue(e.RowHandle, colImporteFinal, ot.ImporteConDescuento);
        }

        private void OTgridView_CustomColumnDisplayText(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnDisplayTextEventArgs e)
        {
            //OrdenDeTrabajo ot = (OrdenDeTrabajo)OTgridView.GetRow(e.ListSourceRowIndex);

            if (e.Column == colNetoACobrar)
                if (Convert.ToDecimal(e.Value) == 0) e.DisplayText = "";
        }

        private void SolcicitudPago_barButtonItem_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            MuestraSolicitudesDeActividadesSeleccionadas();

        }

        private void MuestraSolicitudesDeActividadesSeleccionadas()
        {

            List<OrdenDeTrabajo> ordenes = GetOrdenesSeleccionadas();
            List<OrdenDeTrabajo> ordenesErroneas = new List<OrdenDeTrabajo>();
            foreach (var ordenDeTrabajo in ordenes)
            {
                var firstOrDefault = ordenDeTrabajo.Nomina;
                if (firstOrDefault != null && !firstOrDefault.EstaCuadrada) //si da error en este punto se debe poner la relacion en el datacontext Nomina - Orden de trabajo de UNO a UNO
                {
                    XtraMessageBox.Show(string.Format("La nomina de la actividad {0} no está cuadrada, por lo que no se tomará en cuenta", ordenDeTrabajo.ConsecutivoString), "Información",
                   MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    ordenesErroneas.Add(ordenDeTrabajo);
                }
                if (!LoginHelper.EliminaValidacion)
                    if (ordenDeTrabajo.EstaPagada)
                    {
                        Utils.MuestraInformacion(
                            string.Format(
                                "La orden {0} ya fue pagada, por lo que no se tomará en cuenta<br><i> Para solicitar pago nuevamente  debe eliminarse el pago al artista que tiene asignada",
                                ordenDeTrabajo.ConsecutivoString));
                        ordenesErroneas.Add(ordenDeTrabajo);
                    }
                if (!LoginHelper.EliminaValidacion)
                    if (ordenDeTrabajo.Estado == (int)Enumerados.EstadoOrdenDeTrabajo.Realizada || ordenDeTrabajo.Estado == (short)Enumerados.EstadoOrdenDeTrabajo.Cancelada
                    || (ordenDeTrabajo.Estado == (short)Enumerados.EstadoOrdenDeTrabajo.Cobrada))
                    {
                        Utils.MuestraInformacion(string.Format("La orden {0} no tiene nomina asignada, por lo que no se tomará en cuenta",
                                 ordenDeTrabajo.ConsecutivoString));
                        ordenesErroneas.Add(ordenDeTrabajo);
                    }
            }
            foreach (var ordenErronea in ordenesErroneas)
            {
                ordenes.Remove(ordenErronea);
            }

            //if (ordenes.Any(c => c.Estado == (int)Enumerados.EstadoOrdenDeTrabajo.Realizada 
            //    || c.Estado ==(short)Enumerados.EstadoOrdenDeTrabajo.Cancelada 
            //    || c.Estado ==(short)Enumerados.EstadoOrdenDeTrabajo.Cobrada))//{
            //    MessageBox.Show("las actividades deben tener sus nominas");
            //    return;
            //}
            if (!ordenes.Any())
            {
                XtraMessageBox.Show("No existen actividades para solicitar pago", "Información",
                   MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            foreach (var ordenDeTrabajo in ordenes)
            {
                ordenDeTrabajo.SetFechaDeSolicitud(DateTime.Today);
                ordenDeTrabajo.RegistraLog(Enumerados.TipoAccion.SolicitaPago, string.Format("Se realiza la solicitud del pago de la orden"));
            }
            var monedasSeleccionadas = ordenes.DistinctBy(c => c.TipoMonedaId).Select(c => c.TipoMonedaId);
            var gruposSeleccionadas = ordenes.DistinctBy(c => c.AgrupacionId).Select(c => c.AgrupacionId);

            XtraReport report = new XtraReport();
            report.CreateDocument();

            //saco todas las ordenes de una moneda
            try
            {
                foreach (var moneda in monedasSeleccionadas)
                {
                    foreach (var grupo in gruposSeleccionadas)
                    {
                        //saco los ordenes por moneda y por grupo
                        IEnumerable<OrdenDeTrabajo> ordenesMonedaGrupo = ordenes.Where(c => c.TipoMonedaId == moneda && c.AgrupacionId == grupo && (LoginHelper.EliminaValidacion || (c.Estado == (int)Enumerados.EstadoOrdenDeTrabajo.AsociadaNomina || c.Estado == (int)Enumerados.EstadoOrdenDeTrabajo.AsociadaNominaCobrada)));
                        if (ordenesMonedaGrupo.Any())
                        {
                            SolicitudDePagoXtraReport reporte = new SolicitudDePagoXtraReport(ordenesMonedaGrupo);
                            reporte.CreateDocument();
                            report.Pages.AddRange(reporte.Pages);
                            report.Pages.AddRange(reporte.Pages);
                        }

                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
            report.ShowPreview();
        }

        private List<OrdenDeTrabajo> GetOrdenesSeleccionadas()
        {


            List<OrdenDeTrabajo> ordenesSeleccionadas = new List<OrdenDeTrabajo>();
            var selected = OTgridView.GetSelectedRows();
            for (int i = 0; i < selected.Length; i++)
            {
                OrdenDeTrabajo ordenActual = (OrdenDeTrabajo)OTgridView.GetRow(selected[i]);
                ordenesSeleccionadas.Add(ordenActual);
            }

            return ordenesSeleccionadas;
        }

        private void Annos_checkedComboBoxEdit_EditValueChanged(object sender, EventArgs e)
        {
            FiltraAnno();
        }

        private void FiltraAnno()
        {
            string cadenaDeFiltrado = GetCadenaDeFiltradoPorAnno();
            if (cadenaDeFiltrado == String.Empty) return;
            OTgridView.Columns["Anno"].FilterInfo = new ColumnFilterInfo(ColumnFilterType.Value,
                ConfiguracionGeneral.Anno, cadenaDeFiltrado);
        }

        private string GetCadenaDeFiltradoPorAnno()
        {
            string cadenaFiltro = "";
            var items = Annos_checkedComboBoxEdit.Properties.Items.Where(c => c.CheckState == CheckState.Checked);
            if (!items.Any()) return String.Empty; foreach (var item in items)
            {
                cadenaFiltro += string.Format("[Anno]='{0}' OR", item.Value);
            }
            //Elimino el ultimo OR

            return cadenaFiltro.Right(2);
        }

        private void OTgridView_ColumnFilterChanged(object sender, EventArgs e)
        {
            var filterDeColumn = colAnno.FilterInfo.FilterString;
            if (filterDeColumn == string.Empty)
            {
                Annos_checkedComboBoxEdit.SelectAll();
            }
        }

        private OrdenDeTrabajo GetActividadSeleccionadoPorMouse()
        {
            var gridView = OTgridView;
            Point clickPoint = OTgridControl.PointToClient(MousePosition);
            var hitInfo = gridView.CalcHitInfo(clickPoint);
            if (hitInfo.InRowCell)
            {
                int rowHandle = hitInfo.RowHandle;
                // GridColumn column = hitInfo.Column;
                OrdenDeTrabajo actividad = (OrdenDeTrabajo)gridView.GetRow(rowHandle);
                return actividad;
            }

            return null;

        }

        private void AsignarCheque_barButtonItem_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            bool chequePagadoAgencia = ((BarButtonItem)e.Item) == AsignarCobro_barButtonItem;
            AsignarPagoActividadesSeleccionadas(chequePagadoAgencia);
        }

        private void AsignarPagoActividadesSeleccionadas(bool chequePagadoAgencia)
        {
            var ordenesIdSeleccionadas = GetOrdenesIdSeleccionadas();
            //   bool chequePagadoAgencia = ((BarButtonItem)e.Item) == AsignarCheque_barButtonItem;
            //verifico que las ordenes seleccionadas sean del mismo grupo
            var ordenesSeleccionadas =
                AGlobalDataContext.OrdenDeTrabajo.Where(c => ordenesIdSeleccionadas.Contains(c.OrdenDeTrabajoID));
            if (DynamicQueryable.Any(ordenesSeleccionadas))
            {

                var grupos = ordenesSeleccionadas.Select(c => c.Agrupacion).DistinctBy(c => c.AgrupacionID);
                var clientes = ordenesSeleccionadas.Select(c => c.ControlClientes).DistinctBy(c => c.ControlClienteID);
                if (grupos.Count() > 1 && !chequePagadoAgencia)
                //verifico que el chueque que se le paga al artista no sea asignado a diferentes agrupaciones
                {
                    XtraMessageBox.Show("Las actividades seleccionadas no pueden ser de agrupaciones diferentes, no se les puede asignar el mismo cheque", "Atención", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                    return;
                }
                if (DynamicQueryable.Count(ordenesSeleccionadas.Select(c => c.TipoMoneda).GroupBy(c => c.TipoMonedaID)) > 1)
                {
                    XtraMessageBox.Show("Las actividades seleccionadas no pueden ser de MONEDAS DIFERENTES, no se les puede asignar el mismo cheque", "Atención", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return;
                }
                if (clientes.Count() > 1 && chequePagadoAgencia)
                //verifico que el mismo cheque que se le asigne a las ordenes de trabajo no sean de clientes diferentes pues
                //un cheque solo proviene de un cliente
                {

                    XtraMessageBox.Show("Un mismo cheque no puede provenir de diferentes clientes, verifique su selección", "Atención", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return;
                }

                PopupAsignarChequeXtraForm chequeXtraForm = new PopupAsignarChequeXtraForm();

                //chequeXtraForm.Show();
                var result = chequeXtraForm.ShowDialog();
                if (result == DialogResult.OK)
                {
                    var cheque = chequeXtraForm.Cheque_textEdit.EditValue.ToString().Trim();
                    var fechaEntrega = chequeXtraForm.FechaEntrega_dateEdit.DateTime;

                    foreach (var orden in ordenesSeleccionadas)
                    {
                        var ot = orden;
                        if (ot == null) break;
                        if (chequePagadoAgencia)
                        {
                            ot.Cheque = cheque;
                            ot.FechaEntregaCheque = fechaEntrega;
                            ot.PagoPorTransferencia = chequeXtraForm.PagoPorTransferencia_checkEdit.Checked;
                            if (chequeXtraForm.EstadoCuenta_textEdit.EditValue != null)
                                ot.EstadoCuenta = Convert.ToInt32(chequeXtraForm.EstadoCuenta_textEdit.EditValue);
                            ot.SetEstado();
                            AGlobalDataContext.SubmitChanges();
                            ot.RegistraLog(Enumerados.TipoAccion.InsertarPago,
                                $"se inserta {((bool) ot.PagoPorTransferencia ? "la transferencia" : "el cheque")} {cheque} emitid{((bool) ot.PagoPorTransferencia ? "a" : "o")} por el cliente para pagar la actividad");
                        }
                        else
                        {
                            if (!ot.TieneNominaAsociada)
                            {
                                XtraMessageBox.Show("La Actividad debe tener una nomina asociada", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                            ot.ChequePaga = cheque;
                            ot.FechaDePago = fechaEntrega;
                            ot.SetEstado();
                            AGlobalDataContext.SubmitChanges();
                            ot.RegistraLog(Enumerados.TipoAccion.InsertarCobro,
                                $"se inserta cheque {cheque} pagando al artista la actividad");
                        }

                    }
                     
                    
                }
                else if (result == DialogResult.Abort)
                //usamos el abort para determinar cuando se quiere borrar un cheque determinado
                {
                    foreach (var orden in ordenesSeleccionadas)
                    {
                        var ot = orden;
                        if (ot == null) break;
                        if (chequePagadoAgencia)
                        {
                            ot.Cheque = null;
                            ot.FechaEntregaCheque = null;
                            ot.EstadoCuenta = null;
                            ot.PagoPorTransferencia = null;
                        }
                        else
                        {
                            ot.ChequePaga = null;

                        }
                        ot.SetEstado();
                        AGlobalDataContext.SubmitChanges();
                        ot.RegistraLog(Enumerados.TipoAccion.CancelaPago,"Se cancela pago",AGlobalDataContext);
                    }

                    }
            }
        }

        private void EliminarChequeCobrado_barButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            var ordenesIdSeleccionadas = GetOrdenesIdSeleccionadas();
            var ordenesSeleccionadas =
                AGlobalDataContext.OrdenDeTrabajo.Where(c => ordenesIdSeleccionadas.Contains(c.OrdenDeTrabajoID));
            foreach (var ordenDeTrabajo in ordenesSeleccionadas)
            {
                var pago = ordenDeTrabajo.Cheque;
                ordenDeTrabajo.Cheque = null;
                ordenDeTrabajo.FechaEntregaCheque = null;
                ordenDeTrabajo.SetEstado();
                AGlobalDataContext.SubmitChanges();
                ordenDeTrabajo.RegistraLog(Enumerados.TipoAccion.CancelaCobro, string.Format("se cancela {0} {1} emitid{2} por el cliente para pagar la actividad", (bool)ordenDeTrabajo.PagoPorTransferencia ? "la transferencia" : "el cheque", pago, (bool)ordenDeTrabajo.PagoPorTransferencia ? "a" : "o"));

            }


        }

        private void EliminarPago_barButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            var ordenesIdSeleccionadas = GetOrdenesIdSeleccionadas();
            var ordenesSeleccionadas =
                AGlobalDataContext.OrdenDeTrabajo.Where(c => ordenesIdSeleccionadas.Contains(c.OrdenDeTrabajoID));
            foreach (var ordenDeTrabajo in ordenesSeleccionadas)
            {
               var pago = ordenDeTrabajo.ChequePaga;
                ordenDeTrabajo.ChequePaga = null;
                ordenDeTrabajo.FechaDePago = null;
                ordenDeTrabajo.SetEstado();
                AGlobalDataContext.SubmitChanges();
                ordenDeTrabajo.RegistraLog(Enumerados.TipoAccion.CancelaPago, string.Format("se cancela el cheque {0} que pagaba la actividad", pago));


            }
        }

        private void MostrarPagos_checkButton_CheckedChanged(object sender, EventArgs e)
        {
            //MuestraPagos(MostrarPagos_checkButton.Checked);
            //MostrarPagos_checkButton.Text = MostrarPagos_checkButton.Checked ? "Ocultar Pagos" : "Mostrar Pagos";
        }

        private void MostrarSeleccionados_checkButton_CheckedChanged(object sender, EventArgs e)
        {
            OTgridView.RefreshData();
        }

        private void OTgridView_CustomRowFilter(object sender, DevExpress.XtraGrid.Views.Base.RowFilterEventArgs e)
        {
            if (AShowOnlySelected)
            {

                GridView view = sender as GridView;
                if (Mostrarpago_barCheckItem.Checked)
                {
                    e.Visible = view.GetSelectedRows().Contains(view.GetRowHandle(e.ListSourceRow));
                    e.Handled = true;
                }
                else
                {
                    view.ClearSelection();
                }
                view.RefreshData();
            }
        }

        //private void MostrarSeleccionados_simpleButton_Click(object sender, EventArgs e)
        //{
        //    if (MostrarSeleccionados_simpleButton.Text == "Mostrar solo Seleccionados")
        //    {
        //        AShowOnlySelected = true;
        //       // MostrarSeleccionados_simpleButton.Text = "Mostrar Todos";
        //    }
        //    else
        //    {
        //        AShowOnlySelected = false;
        //        //MostrarSeleccionados_simpleButton.Text = "Mostrar solo Seleccionados";
        //        OTgridView.ClearSelection();
        //    }
        //    OTgridView.RefreshData();
        //}

        private void Duplicar_barLargeButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            var ordenAduplicar = GetOrdenesSeleccionadas()[0];
            if (ordenAduplicar == null) return;
            var ordenNueva = OrdenDeTrabajo.DuplicarActividad(ordenAduplicar, AGlobalDataContext);
            if (ordenNueva == null)
            {
                XtraMessageBox.Show("Error en la operacion");
                return;
            }
            EditOtXtraForm editOt = new EditOtXtraForm(ordenNueva.OrdenDeTrabajoID, true);
            editOt.Show();
            PopulaOrdenDeTrabajoGridControl();
        }

        private void Nueva_barButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            EditOtXtraForm editOt = new EditOtXtraForm(TipoActividad);
            editOt.ShowDialog();
            PopulaOrdenDeTrabajoGridControl();
        }

        private void Slector_barButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            OTgridView.OptionsSelection.MultiSelect = !OTgridView.OptionsSelection.MultiSelect;
            FechaCierre_gridColumn.Visible = OTgridView.OptionsSelection.MultiSelect;
        }

        private void Mostrarpago_barCheckItem_CheckedChanged(object sender, ItemClickEventArgs e)
        {
            MuestraPagos(Mostrarpago_barCheckItem.Checked);
            Mostrarpago_barCheckItem.Caption = Mostrarpago_barCheckItem.Checked ? "Ocultar Pagos" : "Mostrar Pagos";
        }

        private void Selector_barCheckItem1_CheckedChanged(object sender, ItemClickEventArgs e)
        {
            OTgridView.OptionsSelection.MultiSelect = !OTgridView.OptionsSelection.MultiSelect;
            Selector_barCheckItem.Caption = Selector_barCheckItem.Checked ? "Ocultar Selector" : "Mostrar Selector";
            FechaCierre_gridColumn.Visible = OTgridView.OptionsSelection.MultiSelect;
        }

        private void Cerrar_barButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (!OTgridView.GetSelectedRows().Any()) return;
            OrdenDeTrabajo ot = (OrdenDeTrabajo)OTgridView.GetRow(OTgridView.GetSelectedRows()[0]);
            if (ot.TieneNominaAsociada)
            {
                MessageBox.Show("La Orden de Trabajo ya tiene asociada una Nomina, si cambia estos datos puede que no coincidan con la nomina de esta actividad");

            }

            CierraOtXtraForm editOtXtraForm = new CierraOtXtraForm(ot);
            editOtXtraForm.ShowDialog();
            PopulaOrdenDeTrabajoGridControl();
        }

        private void OTgridView_SelectionChanged(object sender, DevExpress.Data.SelectionChangedEventArgs e)
        {
            PrincipalribbonPageGroup.Enabled =
                Reportes_ribbonPageGroup.Enabled =
                   CobroribbonPageGroup.Enabled = pago_ribbonPageGroup.Enabled = GetOrdenesSeleccionadas().Any();

            var ordenesSeleccionadas = GetOrdenesSeleccionadas();
            Cancelar_barButtonItem.Enabled = ordenesSeleccionadas.Any(c => c.Estado == (int)Enumerados.EstadoOrdenDeTrabajo.Realizada);
            Descancelar_barButtonItem.Enabled = ordenesSeleccionadas.Any(c => c.Estado == (int)Enumerados.EstadoOrdenDeTrabajo.Cancelada);
            EliminarCierre_barButtonItem.Enabled = ordenesSeleccionadas.Any(c => c.Estado == (int)Enumerados.EstadoOrdenDeTrabajo.Cerrada || c.Estado == (int)Enumerados.EstadoOrdenDeTrabajo.CerradaCobrada);
            EliminarFechaSolicitud_barButtonItem.Enabled = ordenesSeleccionadas.Any(c => c.FechaSolicitudDePago != null);

            //para mostrar solo los seleccionados
            var selectedRowHandles = OTgridView.GetSelectedRows();
            _selectedDataSourceRowIndeces = selectedRowHandles.Select(x => OTgridView.GetDataSourceRowIndex(x)).ToList();


        }

        private void EliminarCierre_barButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            var ordenesSeleccionadas = GetOrdenesSeleccionadas();
            if (ordenesSeleccionadas.Any())
            {

                if (ordenesSeleccionadas.Any(c => !c.EstaCerrada))
                {
                    Utils.MuestraInformacion("Solo se puede eliminar el cierre de una orden con estado cerrado");

                }
                else
                {
                    foreach (var actividad in ordenesSeleccionadas.Where(c => c.EstaCerrada))
                    {
                        actividad.EliminaCierre();
                        actividad.RegistraLog(Enumerados.TipoAccion.EliminarCierre, "se elimina el cierre", AGlobalDataContext);
                    }
                    PopulaOrdenDeTrabajoGridControl();

                }
            }
            else
            {
                Utils.MuestraInformacion("Seleccione antes una Actividad");
            }
        }

        private void EliminarFechaSolicitud_barButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            var ordenesSeleccionadas = GetOrdenesSeleccionadas();
            if (ordenesSeleccionadas.Any() && ordenesSeleccionadas.Any(c => c.FechaSolicitudDePago != null))
            {
                foreach (var actividad1 in ordenesSeleccionadas)
                {
                    if (actividad1.FechaSolicitudDePago != null)
                    {
                        var actividad = AGlobalDataContext.OrdenDeTrabajo.FirstOrDefault(
                            c => c.OrdenDeTrabajoID == actividad1.OrdenDeTrabajoID);
                        var fechaInicial = actividad.FechaSolicitudDePago;

                        actividad.FechaSolicitudDePago = null;
                        AGlobalDataContext.SubmitChanges();
                        OrdenDeTrabajo.RegistraLogAccion(Enumerados.TipoAccion.EliminarSolicitudDePago,actividad.OrdenDeTrabajoID,$"Se Elimina fecha de pago {fechaInicial}" );
                    }

                }

                PopulaOrdenDeTrabajoGridControl();
            }

            else
            {
                Utils.MuestraInformacion("Seleccione antes una Actividad con fecha de solicitud");
            }
        }

        private void Nota_barButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            var notaDefault = "";
            var ordenes = GetOrdenesSeleccionadas();
            if (ordenes != null)
            {
                if (ordenes.Count == 1)
                {
                    notaDefault = string.IsNullOrEmpty(ordenes.FirstOrDefault().Nota) ? "" : ordenes.FirstOrDefault().Nota;
                }

                XtraInputBoxArgs args = new XtraInputBoxArgs();
                args.Caption = "Insertando Nota";
                args.Prompt = "Nota";
                var editor = new MemoEdit();
                editor.Properties.LinesCount = 4;
                editor.Properties.AllowHtmlDraw = DefaultBoolean.True;
                args.DefaultResponse = notaDefault;
                args.Prompt = "Nota";
                args.Editor = editor;
                foreach (var orden in ordenes)
                {

                    var result = XtraInputBox.Show(args);
                    var nota = result != null ? result.ToString() : "";
                    if (!string.IsNullOrEmpty(nota))
                    {
                        if (OrdenDeTrabajo.SalvaNota(nota, orden.OrdenDeTrabajoID, AGlobalDataContext))
                        {
                            Utils.MuestraMensajeOk();
                        }
                    }
                }
            }
            else
            {
                Utils.MuestraInformacion("Por favor seleccione una actividad");
            }
        }

        private void EliminarNota_barButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            var ordenes = GetOrdenesSeleccionadas();
            if (ordenes != null)
            {
                foreach (var orden in ordenes)
                {
                    //var notaActual = string.IsNullOrEmpty(orden.Nota) ? "" : orden.Nota;
                    //string result = XtraInputBox.Show(notaActual, "", "");
                    //if (!string.IsNullOrEmpty(result))
                    //{
                    if (OrdenDeTrabajo.SalvaNota("", orden.OrdenDeTrabajoID, AGlobalDataContext))
                    {
                        Utils.MuestraMensajeOk();
                    }
                    else
                    {
                        Utils.MuestraError();
                    }
                }
            }
            else
            {
                Utils.MuestraInformacion("Por favor seleccione una actividad");
            }
        }

        private void OTgridView_MouseEnter(object sender, EventArgs e)
        {
            var gridView = OTgridView;
            Point clickPoint = OTgridControl.PointToClient(MousePosition);
            var hitInfo = gridView.CalcHitInfo(clickPoint);
            if (hitInfo.InRowCell)
            {
                int rowHandle = hitInfo.RowHandle;
                GridColumn column = hitInfo.Column;
                //MessageBox.Show(column.Name + " "+rowHandle);
                if (column == colNota)
                {
                    OTgridView.OptionsBehavior.Editable = true;
                    OTgridView.OptionsBehavior.EditingMode = GridEditingMode.EditFormInplace;
                }
                else
                {
                    OTgridView.OptionsBehavior.Editable = false;
                    // OTgridView.OptionsBehavior.EditingMode = GridEditingMode.EditFormInplace;

                }
            }
        }

        private void toolTipController1_GetActiveObjectInfo(object sender, DevExpress.Utils.ToolTipControllerGetActiveObjectInfoEventArgs e)
        {

            if (e.Info == null && e.SelectedControl == OTgridControl)
            {
                GridView view = OTgridControl.FocusedView as GridView;
                GridHitInfo info = view.CalcHitInfo(e.ControlMousePosition);
                GridColumn column = info.Column;
                //MessageBox.Show(column.Name + " "+rowHandle);
                if (column != colNota) return;
                if (info.InRowCell)
                {
                    string text = view.GetRowCellDisplayText(info.RowHandle, info.Column);
                    string cellKey = info.RowHandle.ToString() + " - " + info.Column.ToString();
                    e.Info = new DevExpress.Utils.ToolTipControlInfo(cellKey, text);
                }
            }
        }

        private void barButtonItem4_ItemClick(object sender, ItemClickEventArgs e)
        {

        }

        private void ActualizarTabla_barButtonItem_ItemClick(object sender, ItemClickEventArgs e)
        {
            PopulaOrdenDeTrabajoGridControl();
        }

        private void MostrarSeleccionados_simpleButton_Click_1(object sender, EventArgs e)
        {

        }

        private List<int> _selectedDataSourceRowIndeces;

        private void OTgridView1_SelectionChanged(object sender, DevExpress.Data.SelectionChangedEventArgs e)
        {
            var selectedRowHandles = OTgridView.GetSelectedRows();
            _selectedDataSourceRowIndeces = selectedRowHandles.Select(x => OTgridView.GetDataSourceRowIndex(x)).ToList();
        }

        private void OTGridView1_CustomRowFilter(object sender, DevExpress.XtraGrid.Views.Base.RowFilterEventArgs e)
        {
            if (MostrarSeleccionados_barCheckItem.Checked && _selectedDataSourceRowIndeces != null)
            {
                e.Visible = _selectedDataSourceRowIndeces.Contains(e.ListSourceRow);
                e.Handled = true;
            }
            else
            {
                e.Visible = true;
            }
        }

        private void MostrarSeleccionados_barCheckItem_CheckedChanged(object sender, ItemClickEventArgs e)
        {
            //if(MostrarSeleccionados_barCheckItem.Checked)
            OTgridView.RefreshData();
        }
    }
}