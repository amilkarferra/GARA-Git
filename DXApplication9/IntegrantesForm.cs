using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.Charts.Native;
using DevExpress.Data;
using DevExpress.Data.Linq;
using DevExpress.Data.PLinq.Helpers;
using DevExpress.Utils;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraEditors.Repository;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.EditForm.Helpers.Controls;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraPrinting;
using DevExpress.XtraScheduler.VCalendar;
using DevExpress.XtraTreeList;
using DevExpress.XtraTreeList.Nodes;
using DXApplication9.Properties;


namespace DXApplication9
{
    public partial class IntegrantesForm : DevExpress.XtraEditors.XtraForm
    {
        PrintingSystem printingSystem1 = new PrintingSystem();
        PrintableComponentLink printableComponentLink1 = new PrintableComponentLink();
        public bool _InsertandoArtista;
        private string _AgrupacionAInicializar = null;
        private int _ArtistaProvinciaID;
        private NegocioDataContext _GlobalDataContext = new NegocioDataContext();
        private int _ImagenId;
        private bool _MuestraPosiblesInvitados;

        private class SmallMunicipio
        {
            public int MunicipioID { get; set; }
            public string Descripcion { get; set; }

            public string Provincia { get; set; }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="checkAll">Automaticamente selecciona todas las agrupaciones del listbox de las agrupaciones por lo qeu se mostraran todos los integrantes de todas las agrupaciones</param>
        /// <param name="excluyeGrupo">si es true se mostraran todos los integrantes de todos los grupos menos del grupo pasado como parametro, esto para los posibles invitados</param>
        /// <param name="aGrupo">El grupo sobre el cual se basará el constructor</param>
        public IntegrantesForm(string aGrupo = null)
        {
            InitializeComponent();
            last_emptySpaceItem.HideToCustomization();
            ButtonsContainer_layoutControlItem.HideToCustomization();
            // _MuestraPosiblesInvitados = excluyeGrupo;
            // This line of code is generated by Data Source Configuration Wizard
            _MuestraPosiblesInvitados = _MuestraPosiblesInvitados;
            Artista_gridView.Columns["Orden"].SortOrder = ColumnSortOrder.Ascending;
            //gridControl1.RefreshDataSource();
            //Artista_gridView.RefreshData();
            // This line of code is generated by Data Source Configuration Wizard


            //Muestro solamente para el administrador pues esta facilidad aun no esta terminada de programar
            if (Proyectos.UsuarioRegistrado.EsAdministrador())
            {
                bindingSource2.DataSource = _GlobalDataContext.Cancion;
                Repertorio_xtraTabPage.Visible = true;
                TipoPasaporte_repositoryItemLookUpEdit.DataSource = Enumerados.EnumToList(Enumerados.ProyectoEnumerados.TipoPasaporte);

            }

            _AgrupacionAInicializar = aGrupo;
            //  MunicipioTreeList.KeyFieldName = "MunicipioID";PopulaMunicipiosTreeList(MunicipioTreeList);
            Municipio_repositoryItemLookUpEdit.DataSource = MunicipioTreeList.DataSource = GetListaDeMunicipios();
            MunicipioTreeList.RootValue = DBNull.Value;
            //var _EditForm = new EditIntegrante_XtraForm();
            //Artista_gridView.OptionsEditForm.CustomEditFormLayout = _EditForm;
            Integrantes_gridControl.DataSource = _GlobalDataContext.Artista.Where(c => !c.FechaDeBaja.HasValue);
            //// Add the link to the printing system's collection of links. 
            //printingSystem1.Links.AddRange(new object[] { printableComponentLink1 });

            //// Assign a control to be printed by this link. 
            //printableComponentLink1.Component = gridControl1;
            //var documentViewer1 = ((MainForm) MdiParent).documentViewer1;// Assign the printing system to the document viewer. 
            //documentViewer1.PrintingSystem = printingSystem1;


        }

        private void IntegrantesForm_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'artistasDataSet.Provincia' table. You can move, or remove it, as needed.
            this.provinciaTableAdapter.Fill(this.artistasDataSet.Provincia);
            // TODO: This line of code loads data into the 'artistasDataSet.Municipio' table. You can move, or remove it, as needed.
            //this.municipioTableAdapter.Fill(this.artistasDataSet.Municipio);
            // TODO: This line of code loads data into the 'artistasDataSet.Agrupacion' table. You can move, or remove it, as needed.


            // TODO: This line of code loads data into the 'artistasDataSet.Agrupacion' table. You can move, or remove it, as needed.

            //// TODO: This line of code loads data into the 'artistasDataSet.Artista' table. You can move, or remove it, as needed.
            //this.artistaTableAdapter.Fill(this.artistasDataSet.Artista);
            // TODO: This line of code loads data into the 'artistasDataSet.Artista' table. You can move, or remove it, as needed.
            //splitContainerControl2.PanelVisibility = SplitPanelVisibility.Panel1;

            //if (!string.IsNullOrEmpty(_AgrupacionAInicializar))
            //{
            //    Agrupacion_checkedListBoxControl.DataSource = _GlobalDataContext.Agrupacion.OrderBy(c => c.Nombre);
            //    SetGroupSelectState(_AgrupacionAInicializar);
            //}
            //else
            //{
            //    Agrupacion_checkedListBoxControl.DataSource = _GlobalDataContext.Agrupacion.Where(c => c.PerteneceACatalogo).OrderBy(c => c.Nombre);
            //    SelectAllAgrupacion_checkEdit.Checked = true;
            //}

            Municipio_repositoryItemSearchLookUpEdit.DataSource = GetListaDeMunicipios();
            Municipio_repositoryItemSearchLookUpEdit.DisplayMember = "Descripcion";
            Municipio_repositoryItemSearchLookUpEdit.ValueMember = "MunicipioID";
        }







        private List<SmallMunicipio> GetListaDeMunicipios()
        {
            List<SmallMunicipio> _Municipios = _GlobalDataContext.Municipio.Select(c => new SmallMunicipio { Descripcion = c.Descripcion, MunicipioID = c.MunicipioID, Provincia = c.Provincia.Descripcion }).ToList();
            return _Municipios;
        }

        //private void PopulaMunicipiosTreeList(TreeList aTreeList)
        //{

        //    var _Provincias = _GlobalDataContext.Provincia;
        //    // var _TreeList = repositoryItemTreeListLookUpEdit.TreeList;
        //    aTreeList.BeginUpdate();
        //    aTreeList.Columns.Add();
        //    aTreeList.Columns[0].Caption = "MunicipioID";
        //    aTreeList.Columns[0].VisibleIndex = 0;
        //    aTreeList.Columns.Add();
        //    aTreeList.Columns[1].Caption = "Descripcion";
        //    aTreeList.Columns[1].VisibleIndex = 1;
        //    aTreeList.Columns.Add();
        //    aTreeList.EndUpdate();
        //    aTreeList.BeginUnboundLoad();
        //    TreeListNode _NodeParent = null;
        //    foreach (var _Provincia in _Provincias)
        //    {
        //        TreeListNode _RootNode = aTreeList.AppendNode(new object[] { _Provincia.ProvinciaID * -1, _Provincia.Descripcion }, _NodeParent);
        //        var _MunicipiosDeProvincia = _GlobalDataContext.Municipio.Where(c => c.ProvinciaID == _Provincia.ProvinciaID);
        //        foreach (var _Municipio in _MunicipiosDeProvincia)
        //        {
        //            aTreeList.AppendNode(new object[] { _Municipio.MunicipioID, _Municipio.Descripcion }, _RootNode);
        //        }
        //    }
        //    aTreeList.EndUnboundLoad();
        //}

        //private void gridView1_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        //{
        //    _GlobalDataContext.SubmitChanges();
        //}

        //private void checkedListBoxControl1_CheckMemberChanged(object sender, EventArgs e)
        //{
        //    var a = sender;
        //    var b = e;
        //}

        //private void AgrupacioncheckedListBoxControl_ItemCheck(object sender, DevExpress.XtraEditors.Controls.ItemCheckEventArgs e)
        //{
        //    Cancion_gridControl.EmbeddedNavigator.Enabled = Agrupacion_checkedListBoxControl.CheckedItemsCount > 0;
        //    List<Int32> Lista = new List<int>();
        //    foreach (var _ItemCheck in Agrupacion_checkedListBoxControl.CheckedItems)
        //    {
        //        var _Value = (((Agrupacion)(_ItemCheck))).AgrupacionID;
        //        Lista.Add(Convert.ToInt32(_Value));

        //    }
        //    PopulaIntegrantesGridControl();
        //    Cache.AgrupacionsIds = GetListaAgrupaciones();
        //    var _Canciones = _GlobalDataContext.Cancion.Where(c => Lista.Contains(c.AgrupacionId));
        //    Cancion_gridControl.DataSource = _Canciones;
        //    Cancion_gridControl.Refresh();
        //    Integrantes_gridControl.Refresh();
        //}

        private void IntegrantesForm_FormClosed(object sender, FormClosedEventArgs e)
        {
            var _MainForm = (MainForm)this.MdiParent;
            if (_MainForm != null)
                _MainForm.EnableListaIntegrantesButton(true);
        }

        private void IntegrantesForm_Deactivate(object sender, EventArgs e)
        {
            var _MainForm = (MainForm)MdiParent;
            if (_MainForm != null) _MainForm.ProyectosBarButtonItem.Enabled = false;
        }

        private void IntegrantesForm_Activated(object sender, EventArgs e)
        {
            var _MainForm = (MainForm)MdiParent;
            if (_MainForm != null) _MainForm.ProyectosBarButtonItem.Enabled = true;
        }

        //private void FundamentacionLink_LinkClicked(object sender, DevExpress.XtraNavBar.NavBarLinkEventArgs e)
        //{
        //    List<Artista> _ArtistasList = new List<Artista>();
        //    var Rows = ((Artista_gridView.GetSelectedRows()).Select(c => Artista_gridView.GetRow(c)).ToList());
        //    foreach (var _Row in Rows)
        //    {
        //        Artista _row = (Artista)_Row;
        //        _ArtistasList.Add(_row);
        //    }
        //    var _ArtistasSeleccionados = _ArtistasList;
        //    if (_ArtistasList.Count > 0)
        //    //TODO: Puede darse el caso que seleccionen dos agrupaciones, tendria que enviar al constructorla  agrupacione tiene mas integrantes seleccionados
        //    //Ahora estoy cogiendo solo el grupo del primer integrante seleccionado, pero no necesariamente tiene que ser asi
        //    {
        //        NewProyectForm _NewProyectForm = new NewProyectForm(Enumerados.TipoProyecto.TramiteMigratorio, _ArtistasList[0].AgrupacionId, _ArtistasList);
        //        _NewProyectForm.Name = "Nuevo Proyecto de Fundamentación Para Tramites Migratorios";
        //        _NewProyectForm.Text = "Nuevo Proyecto de Fundamentación Para Tramites Migratorios"; _NewProyectForm.Show();
        //    }
        //    else if (Agrupacion_checkedListBoxControl.CheckedItemsCount > 0)
        //    {
        //        var _GroupId = Convert.ToInt32(Agrupacion_checkedListBoxControl.CheckedItems[0]);
        //        NewProyectForm _NewProyectForm = new NewProyectForm(Enumerados.TipoProyecto.TramiteMigratorio, _GroupId);
        //        _NewProyectForm.Name = "Nuevo Proyecto de Fundamentación";
        //        _NewProyectForm.Show();
        //    }

        //}

        //private void Button_delete_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        //{
        //    // if(gridView1.GetFocusedRowCellValue() )
        //    _GlobalDataContext.SubmitChanges();
        //    Integrantes_gridControl.Refresh();
        //}



        //private void EliminarButton_Click(object sender, EventArgs e)
        //{

        //    //Todo Mostrar un mensaje de advertencia y capturar la desicion
        //    int[] _Rows = Artista_gridView.GetSelectedRows();
        //    foreach (var _Row in _Rows)
        //    {
        //        Artista_gridView.DeleteRow(_Row);
        //    }
        //    _GlobalDataContext.SubmitChanges();
        //}


        private void Artista_gridView_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            try
            {
                var a = e.Row as Artista; if (a != null && a.ArtistaID != 0)
                    //MessageBox.Show(a.TipoMonedaId.ToString());
                    _GlobalDataContext.SubmitChanges();
                PopulaIntegrantesGridControl();
            }
            catch (Exception _Exception)
            {

                MessageBox.Show(_Exception.Message);
            }

        }

        private void InsertInegrante_buttonEdit_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            if (e.Button.IsLeft)
            {
                DialogResult = DialogResult.OK;

            }
            Close();
        }

        private void NuevoTemasimpleButton_Click(object sender, EventArgs e)
        {
            //if (Agrupacion_checkedListBoxControl.CheckedItems.Count > 0)
            //{
            //    foreach (var _ItemCheck in Agrupacion_checkedListBoxControl.CheckedItems)
            //    {
            //        string _NombreAgrupacion = (((DataRowView)(_ItemCheck)).Row).ItemArray[1].ToString();
            //        if (Agrupacion_checkedListBoxControl.CheckedItemsCount > 1)
            //        {
            //            DialogoForm _DialogoForm = new DialogoForm(string.Format("Hay mas de una agrupación seleccionada en el panel lateral, se le asignará el tema a la agrupación {0} por ser la primera seleccionada, está de acuerdo?", _NombreAgrupacion));
            //            if (_DialogoForm.ShowDialog() != DialogResult.OK)
            //            {
            //                break;
            //            }
            //        }
            //        Cancion_gridView.AddNewRow();
            //        break;
            //    }
            //}
        }




        private void Cancion_gridControl_EmbeddedNavigator_Click(object sender, EventArgs e)
        {

        }

        private void Cancion_gridControl_EmbeddedNavigator_ButtonClick(object sender, NavigatorButtonClickEventArgs e)
        {
        }

        private void Cancion_gridView_RowUpdated_1(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            //var _AgrupacionId = 
            //if (_AgrupacionId == null)
            //{
            //    MessageBox.Show("Debe seleccionar una agrupación", "ATENCION", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            //}
            //else
            //{
            //    Cancion _Cancion = (Cancion)e.Row;
            //    _Cancion.AgrupacionId = Convert.ToInt32(_AgrupacionId);
            //    _GlobalDataContext.SubmitChanges();
            //}

        }

        private void Cancion_gridView_RowDeleted(object sender, DevExpress.Data.RowDeletedEventArgs e)
        {
            _GlobalDataContext.SubmitChanges();
        }

        private void ValidaControl(object sender, CancelEventArgs e)
        {
            var _Control = ((TextEdit)sender);
            var a = _Control.Text;
            if (String.IsNullOrEmpty(a))
            {
                _Control.ErrorText = "Dato faltante!";
                DialogResult = DialogResult.Retry;
                e.Cancel = true;
            }
        }

        private void Pasaporte_gridView_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            _GlobalDataContext.SubmitChanges();
        }

        /// <summary>
        /// Para manejar la forma de seleccionar las agrupaciones en el Agrupacion_checkedListBoxControl
        /// </summary>
        /// <param name="aNombreDelGrupo"></param>
        /// <param name="setSelect">si true entonces selecciona solo el grupo, si false entonces selecciona todos los grupos menos el grupo pasado como parametro </param>
        public void SetGroupSelectState(string aNombreDelGrupo, bool setSelect = true)
        {
            //int _Index = Agrupacion_checkedListBoxControl.FindStringExact(aNombreDelGrupo);
            //if (_Index == -1) return;
            //if (setSelect)
            //    Agrupacion_checkedListBoxControl.UnCheckAll();
            //else
            //    Agrupacion_checkedListBoxControl.CheckAll();
            //Agrupacion_checkedListBoxControl.SetItemChecked(_Index, setSelect);
        }


        private void Agrupacion_checkedListBoxControl_DataSourceChanged(object sender, EventArgs e)
        {
            //int Index = Agrupacion_checkedListBoxControl.Items.IndexOf(1);
            //Agrupacion_checkedListBoxControl.UnCheckAll();
            //Agrupacion_checkedListBoxControl.SetItemChecked(Index, true);
        }


        private void SelectAllAgrupacion_checkEdit_CheckedChanged(object sender, EventArgs e)
        {
            //if (SelectAllAgrupacion_checkEdit.Checked)
            //{
            //    Agrupacion_checkedListBoxControl.CheckAll();
            //}
            //else
            //{
            //    Agrupacion_checkedListBoxControl.UnCheckAll();
            //}
        }

        private void Artista_gridView_EditFormShowing(object sender, DevExpress.XtraGrid.Views.Grid.EditFormShowingEventArgs e)
        {
            Artista_gridView.OptionsEditForm.ShowUpdateCancelPanel = DefaultBoolean.False; ////trampa para disparar obligatoriamente el evento rowupdate
            // var _Procesando = (Artista) Artista_gridView.GetRow(e.RowHandle);
            //Artista_gridView.SetRowCellValue(e.RowHandle, colOrden, _Procesando.Orden + 1 - 1);
            //var _FirstOrDefault = Artista_gridView.Columns.FirstOrDefault(c => c == colMunicipioId);
            //if (_FirstOrDefault != null) _FirstOrDefault.Visible = true;

            //if (!_GlobalDataContext.FotoDeIntegrante.Any(c => c.ArtistaId == _Procesando.ArtistaID))
            //{
            //   // Artista_gridView.SetRowCellValue(e.RowHandle, colFotoId, null);
            //    //if (Imagen_repositoryItemPictureEdit.InitialImage!=null)
            ////Imagen_repositoryItemPictureEdit.InitialImage.Dispose();
            //}
        }

        private void Artista_gridView_ShowingPopupEditForm(object sender, DevExpress.XtraGrid.Views.Grid.ShowingPopupEditFormEventArgs e)
        {

            foreach (Control control in e.EditForm.Controls)
            {
                if (control is EditFormContainer)
                {
                    foreach (Control nestedControl in control.Controls)
                    {
                        if (nestedControl is PanelControl)
                        {
                            foreach (Control button in nestedControl.Controls)
                            {
                                if (button is SimpleButton)
                                {
                                    SimpleButton simpleButton = button as SimpleButton;
                                    if (string.Compare(simpleButton.Text, "Actualizar", true) == 0)
                                    {
                                        simpleButton.Name = "ActualizarBoton";
                                    }
                                    simpleButton.Click += simpleButton_Click;
                                    //simpleButton.Visible = false;
                                }
                            }
                        }
                        //if (nestedControl is PictureEdit) {
                        //    (nestedControl as PictureEdit).Image = null;
                        //}
                    }
                }
            }
        }

        private void simpleButton_Click(object sender, EventArgs eventArgs)
        {
            var _SimpleButton = sender as SimpleButton;
            if (_SimpleButton != null)
            {
                if (_SimpleButton.DialogResult == DialogResult.Cancel)
                {
                    Artista_gridView.CancelUpdateCurrentRow();
                }
            }
            //}
        }

        private void Artista_gridView_RowDeleted(object sender, RowDeletedEventArgs e)
        {
            _GlobalDataContext.SubmitChanges();

        }

        private void Municipio_repositoryItemSearchLookUpEdit_Popup(object sender, EventArgs e)
        {
            ((SearchLookUpEdit)sender).Properties.View.Columns[0].Visible = false;
        }

        private void Artista_gridView_InitNewRow(object sender, DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs e)
        {
            //var _Procesando = Artista_gridView.GetRow(e.RowHandle) as Artista;
            //if (_Procesando.ArtistaID == 0 || !_GlobalDataContext.FotoDeIntegrante.Any(c => c.ArtistaId == _Procesando.ArtistaID))
            //{
            //    Imagen_repositoryItemPictureEdit.InitialImage = null;
            //}
            //if (Agrupacion_checkedListBoxControl.CheckedItems != null)
            //{
            //    var _PrimerItem = Agrupacion_checkedListBoxControl.SelectedIndices[0];
            //    var _FirstItemCheckValue = Agrupacion_checkedListBoxControl.GetItemValue(_PrimerItem);
            //    // var _Value = Convert.ToInt32(((DataRowView)(_ItemCheck)).Row.ItemArray[0]);
            //    //  int _PrimerGrupoSeleccionado =_Value;
            //    Artista_gridView.SetRowCellValue(e.RowHandle, Artista_gridView.Columns["AgrupacionId"], _FirstItemCheckValue);
            //}

        }



        private void Imagen_repositoryItemPictureEdit_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void Artista_gridView_MouseEnter(object sender, EventArgs e)
        {
            //var gridView = Artista_gridView;
            //Point clickPoint = gridControl1.PointToClient(MousePosition);
            //var hitInfo = gridView.CalcHitInfo(clickPoint);
            //if (hitInfo.InRowCell)
            //{
            //    int rowHandle = hitInfo.RowHandle;
            //    GridColumn column = hitInfo.Column;
            //    //MessageBox.Show(column.Name + " "+rowHandle);
            //    if (column == colOrden)
            //    {
            //        Artista_gridView.OptionsBehavior.EditingMode = GridEditingMode.EditFormInplace;

            //if (gridView1.GetSelectedRows().Count() > 0)
            //{
            //    var _SelectedRow = gridView1.GetSelectedRows()[0];
            //    Proyectos _ProyectoEditar = _GlobalDataContext.Proyectos.FirstOrDefault(c => c.ProyectoID == ((Proyectos)gridView1.GetRow(_SelectedRow)).ProyectoID);
            //    if (_ProyectoEditar == null) return;
            //    NewProyectForm _NewProyectForm = new NewProyectForm(_ProyectoEditar);
            //    _NewProyectForm.CausaDeProyectoMemoEdit.Enabled = true;
            //    if (_NewProyectForm.ShowDialog() == DialogResult.OK)
            //    {
            //        var _Main = (MainForm)MdiParent;
            //        _Main.MuestraProyectos();
            //        Dispose();
            //        gridView1.RefreshData();
            //    }


            //}

            //}
            //else if (column.Name == Delete_gridColumn.Name)
            //{
            //    if (gridView1.GetSelectedRows().Count() > 0)
            //    {
            //        var _SelectedRow = gridView1.GetSelectedRows()[0];
            //        Proyectos _ProyectoEditar = (Proyectos)gridView1.GetRow(_SelectedRow);
            //        if ((new DialogoForm("Esta Seguro que eliminará el Proyecto")).ShowDialog() == DialogResult.OK)
            //        {
            //            gridView1.DeleteSelectedRows(); _GlobalDataContext.Proyectos.DeleteOnSubmit(_ProyectoEditar);
            //            _GlobalDataContext.SubmitChanges();
            //            gridControl1.Refresh();
            //        }


            //    }
            //}
            //}
        }

        private void Artista_gridView_Click(object sender, EventArgs e)
        {
            var gridView = Artista_gridView;
            Point clickPoint = Integrantes_gridControl.PointToClient(MousePosition);
            var hitInfo = gridView.CalcHitInfo(clickPoint);
            if (hitInfo.InRowCell)
            {
                int rowHandle = hitInfo.RowHandle;
                GridColumn column = hitInfo.Column;
                Artista _Artista = (Artista)gridView.GetRow(rowHandle);
                // MessageBox.Show(column.Name + " "+rowHandle);
                if (column == colEdit_gridColumn)
                {
                    EditIntegrante_XtraForm _EditIntegrante_XtraForm = new EditIntegrante_XtraForm(_Artista);
                    if (_EditIntegrante_XtraForm.ShowDialog() == DialogResult.OK)
                    {
                        PopulaIntegrantesGridControl();
                    }

                }

                if (column == colBaja_gridColumn)
                {
                    //if (gridView1.GetSelectedRows().Count() > 0)
                    //{

                        Artista _Integrante = _GlobalDataContext.Artista.FirstOrDefault(c => c.ArtistaID == _Artista.ArtistaID);
                        if (_Integrante.FechaDeBaja.HasValue)
                        {
                            if (MessageBox.Show("Este integrante está actualmente de baja, desea darle de Alta nuevamente?", "Atención", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                            {
                                _Integrante.FechaDeBaja = null;
                                _GlobalDataContext.SubmitChanges();
                                
                            }
                        }
                        else
                        {
                            //determinar si el integrante no tiene ningun ingreso entonces solicitar que se borre
                            if (MessageBox.Show("Al darle baja a este integrante no saldrá en más ninguna nómina, esta seguro?", "ESTA SEGURO?", MessageBoxButtons.OKCancel, MessageBoxIcon.Asterisk) == DialogResult.OK)
                            {
                                if (!_Integrante.ParticipantesDeAcividad.Any() && !_Integrante.ParticipantesDeProyectos.Any())
                                {
                                    if (MessageBox.Show("El integrante no tiene ningún dato histórico registrado, desea borrarlo completamente?, tenga en cuenta que  este proceso será irreversible", "Opción", MessageBoxButtons.OKCancel, MessageBoxIcon.Hand) == DialogResult.OK)
                                    {
                                        //Artista_gridView.DeleteRow(rowHandle);
                                        _GlobalDataContext.Artista.DeleteOnSubmit(_Integrante);
                                        _GlobalDataContext.SubmitChanges();
                                       PopulaIntegrantesGridControl();
                                    return;
                                    }
                                }
                                PopupBajaXtraForm _BajaXtraForm = new PopupBajaXtraForm(_Integrante.ArtistaID);
                                if (_BajaXtraForm.ShowDialog() != DialogResult.Cancel)
                                {
                                    Integrantes_gridControl.DataSource = (new NegocioDataContext()).Artista.Where(c => !c.FechaDeBaja.HasValue);
                                }
                            }
                        }
                   // }
                }



            }

        }

        private void Artista_gridView_MouseMove(object sender, MouseEventArgs e)
        {
            var gridView = Artista_gridView;
            Point clickPoint = Integrantes_gridControl.PointToClient(MousePosition);
            var hitInfo = gridView.CalcHitInfo(clickPoint);
            if (hitInfo.InRowCell)
            {
                int rowHandle = hitInfo.RowHandle;
                GridColumn column = hitInfo.Column;
                // MessageBox.Show(column.Name + " "+rowHandle);
                if (column == colOrden)
                {
                    Artista_gridView.OptionsBehavior.EditingMode = GridEditingMode.Inplace;
                }
                else
                {
                    Artista_gridView.OptionsBehavior.EditingMode = GridEditingMode.EditForm;

                }
            }
        }

        private void DelCatalogo_checkEdit_CheckedChanged(object sender, EventArgs e)
        {
            //if (!DelCatalogo_checkEdit.Checked)
            //{
            //    Agrupacion_checkedListBoxControl.DataSource = (new NegocioDataContext()).Agrupacion.OrderByDescending(c => c.PerteneceACatalogo).ThenBy(c => c.Nombre);
            //    Agrupacion_checkedListBoxControl.Refresh();
            //}
            //else
            //{
            //    Agrupacion_checkedListBoxControl.DataSource = (new NegocioDataContext()).Agrupacion.Where(c => c.PerteneceACatalogo).OrderBy(c => c.Nombre);
            //    Agrupacion_checkedListBoxControl.Refresh();
            //}
            //Agrupacion_checkedListBoxControl.CheckAll();
        }

        private void Cancion_gridView_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            Cancion _Tema = (Cancion)e.Row;
            if (_Tema.Autor == null)
            {
                Cancion_gridView.SetColumnError(colAutor, "Debe especificar el Autor del tema");
                e.Valid = false;
            }
            if (_Tema.Sociedad == null) _Tema.Sociedad = "SGAE";
            if (_Tema.Titulo == null)
            {
                Cancion_gridView.SetColumnError(colTitulo, "Debe especificar el Título del tema");
                e.Valid = false;
            }
        }

        private void Cancion_gridView_InvalidRowException(object sender, DevExpress.XtraGrid.Views.Base.InvalidRowExceptionEventArgs e)
        {
            e.ExceptionMode = ExceptionMode.DisplayError;
        }

        //public List<int> GetListaAgrupaciones()
        //{
        //    //List<Int32> _Lista = new List<int>();
        //    //foreach (var _ItemCheck in Agrupacion_checkedListBoxControl.CheckedItems)
        //    //{
        //    //    var _Value = (((Agrupacion)(_ItemCheck))).AgrupacionID;
        //    //    _Lista.Add(Convert.ToInt32(_Value));

        //    //}
        //    //return _Lista;
        //}

        public void PopulaIntegrantesGridControl()
        {
            //var _Lista = GetListaAgrupaciones();
            //var _Integrantes = new NegocioDataContext().AgrupacionDeArtista.Where(c => _Lista.Contains(c.AgrupacionId)).Select(c => c.Artista).DistinctBy(c => c.ArtistaID);
            //Integrantes_gridControl.DataSource = _Integrantes;
        }

        private void NuevoIntegrante_simpleButton_Click(object sender, EventArgs e)
        {
            EditIntegrante_XtraForm _EditIntegrante_XtraForm = new EditIntegrante_XtraForm(); 
            if (_EditIntegrante_XtraForm.ShowDialog() != DialogResult.Cancel)
            {
                PopulaIntegrantesGridControl();
            }
        }

        public void PopulaGridConBajas()
        {
            Integrantes_gridControl.DataSource = (new NegocioDataContext()).Artista;
            MostrarTodos_simpleButton.Text = "Ocultar Bajas";
            MostrarTodos_simpleButton.Image = Resources.hide_32x32;
        }
        public void PopulaGridSinBajas()
        {
          // var _Lista = GetListaAgrupaciones();
           // var _Integrantes = new NegocioDataContext().AgrupacionDeArtista.Where(c => _Lista.Contains(c.AgrupacionId) && ).Select(c => c.Artista).DistinctBy(c => c.ArtistaID);
            Integrantes_gridControl.DataSource = (new NegocioDataContext()).Artista.Where(c => !c.FechaDeBaja.HasValue);
            MostrarTodos_simpleButton.Text = "Mostrar Todos";
            MostrarTodos_simpleButton.Image = Resources.show_32x32;
        }
        private void MostrarTodos_simpleButton_Click(object sender, EventArgs e)
        {
            if (MostrarTodos_simpleButton.Text == "Mostrar Todos")
            {
                PopulaGridConBajas();
            }
            else
            {
                PopulaGridSinBajas();
            }
        }

        private void InsertInegrante_buttonEdit_EditValueChanged(object sender, EventArgs e)
        {

        }

        //    private void IntegrantesForm_Shown(object sender, EventArgs e)
        //    {
        //        var _MainForm = MdiParent as MainForm;
        //        if (_MainForm != null) _MainForm.splashScreenManager1.CloseWaitForm();}
    }


}